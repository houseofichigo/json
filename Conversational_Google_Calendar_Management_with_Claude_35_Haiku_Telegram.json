{
  "id": "rvfxD45r5unDVTlq",
  "meta": {
    "instanceId": "c92a0c76586da37fb3ac600956b62e842bfa4bd5f52acc7feb4e8a6e75ca1381",
    "templateCredsSetupCompleted": true
  },
  "name": "MS_CALENDAR",
  "tags": [],
  "nodes": [
    {
      "id": "598b3faf-c19d-47a8-9f01-fc0238194336",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "position": [
        -100,
        0
      ],
      "webhookId": "a0821d79-f6d2-456b-bfe7-204ca828a692",
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {
          "chatIds": "={{ $vars.telegram_chat_id }}"
        }
      },
      "credentials": {
        "telegramApi": {
          "id": "OymlVCuTPYhVa2B9",
          "name": "Telegram account"
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "9c0699ec-4e49-4621-bd56-10b043bd66cf",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        400,
        0
      ],
      "parameters": {
        "text": "=You are an EVENT BOT. Your only goal is to extract calendar details from the user’s text and call the correct Google Calendar tool. You must not reply directly to the user; only tool calls are allowed.\n\nYou will follow this sequence of rules:\n\n1.  **Parse and Normalize:**\n    * First, parse the incoming text to find the event title, date, and a start time.\n    * Normalize dates to `YYYY-MM-DD` format (the current year is 2025).\n    * Normalize times to 24-hour `HH:MM:SS` format.\n\n2.  **Determine Duration:**\n    * If a start time is present, the event duration is exactly **1 hour**. The `end` time is `start` + 1 hour.\n    * If NO start time is present, the event is **all-day**. The `start` time is `YYYY-MM-DDT00:00:00` and the `end` time is `YYYY-MM-DDT23:59:59`.\n\n3.  **Perform Conflict Check (MANDATORY):**\n    * Using the calculated start and end times, you MUST first call the **`Get`** tool to check for existing events in that window.\n    * If the `Get` tool returns ANY event (meaning there is an overlap), you MUST STOP and immediately call the **`Explain`** tool. Your message for the `Explain` tool must only ask for a new time or date due to a conflict.\n\n4.  **Create the Event:**\n    * If the `Get` tool returns no events (the time slot is free), you MUST then call the **`Create`** tool using the extracted title and the normalized `start` and `end` times.\n\n\n** Now:**\n\n{{ $now }}\n\n** User Input:**\n\n{{ $json.message.text }}\n\n**Examples of Logic:**\n\n* **User says:** “ضيف ميعاد استلام شهادات التخرج من الكلية يوم ١٧ شهر ٧ الساعه ٩ صباحاً”\n    * **Your logic:** Calculate `start` as `2025-07-17T09:00:00` and `end` as `2025-07-17T10:00:00`. Call `Get` with this window. If it's free, call `Create` with the title “ميعاد استلام شهادات التخرج من الكلية” and the calculated times. If it's not free, call `Explain` to ask for a new time.\n\n* **User says:** “ذكرني بتجديد الباسبور يوم ٢٠ أغسطس”\n    * **Your logic:** Calculate `start` as `2025-08-20T00:00:00` and `end` as `2025-08-20T23:59:59`. Call `Get` with this window. If the day has conflicting all-day events, call `Explain`. Otherwise, call `Create` with the title “تجديد الباسبور” as an all-day event.\n\n",
        "options": {},
        "promptType": "define",
        "needsFallback": true
      },
      "typeVersion": 2
    },
    {
      "id": "c9ac882c-d8ed-4d92-831e-b11bc739a76a",
      "name": "4.1-nano",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        280,
        300
      ],
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "credentials": {
        "openAiApi": {
          "id": "8lxlMBHY8Mt8KqSc",
          "name": "OpenAi account"
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "41da20c9-da77-4908-9c55-dddecd1dc729",
      "name": "Create",
      "type": "n8n-nodes-base.googleCalendarTool",
      "notes": "Use this to create a new calendar event. Requires a title, start time, and end time.",
      "position": [
        680,
        300
      ],
      "parameters": {
        "end": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('End', ``, 'string') }}",
        "start": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Start', ``, 'string') }}",
        "calendar": {
          "__rl": true,
          "mode": "list",
          "value": "msayed.cs@gmail.com",
          "cachedResultName": "msayed.cs@gmail.com"
        },
        "additionalFields": {
          "description": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Description', ``, 'string') }}"
        }
      },
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "qRjjWpwkww00Tj0o",
          "name": "msayed.cs Calendar"
        }
      },
      "notesInFlow": false,
      "typeVersion": 1.3
    },
    {
      "id": "689186fa-2988-448d-b1c3-279b7b915ecf",
      "name": "Get",
      "type": "n8n-nodes-base.googleCalendarTool",
      "notes": "Use this to get a list of all existing events within a specific time range.",
      "position": [
        800,
        300
      ],
      "parameters": {
        "options": {},
        "timeMax": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Before', ``, 'string') }}",
        "timeMin": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('After', ``, 'string') }}",
        "calendar": {
          "__rl": true,
          "mode": "list",
          "value": "msayed.cs@gmail.com",
          "cachedResultName": "msayed.cs@gmail.com"
        },
        "operation": "getAll",
        "returnAll": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_All', ``, 'boolean') }}"
      },
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "qRjjWpwkww00Tj0o",
          "name": "msayed.cs Calendar"
        }
      },
      "notesInFlow": false,
      "typeVersion": 1.3
    },
    {
      "id": "dafaa597-44fa-4b4e-8989-51eea390a044",
      "name": "Explain",
      "type": "n8n-nodes-base.telegramTool",
      "notes": "Use this ONLY to ask the user a clarifying question if you cannot create or get an event",
      "position": [
        560,
        300
      ],
      "webhookId": "d76d5280-bfcc-4c1c-a630-00d354b33d04",
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "message": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Message', ``, 'string') }}",
        "options": {
          "limitWaitTime": {
            "values": {
              "resumeUnit": "minutes",
              "resumeAmount": 45
            }
          }
        },
        "operation": "sendAndWait",
        "responseType": "freeText"
      },
      "credentials": {
        "telegramApi": {
          "id": "OymlVCuTPYhVa2B9",
          "name": "Telegram account"
        }
      },
      "notesInFlow": false,
      "typeVersion": 1.2
    },
    {
      "id": "c7d89753-637c-4bff-9cdd-d972fbdfd0a3",
      "name": "Haiku 3.5",
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "position": [
        140,
        300
      ],
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "claude-3-5-haiku-20241022",
          "cachedResultName": "Claude Haiku 3.5"
        },
        "options": {}
      },
      "credentials": {
        "anthropicApi": {
          "id": "4ScK4atfzHy1FIZU",
          "name": "Anthropic account"
        }
      },
      "typeVersion": 1.3
    },
    {
      "id": "b5ad1910-83f0-4673-9ea5-48b720134a7c",
      "name": "Result",
      "type": "n8n-nodes-base.telegram",
      "position": [
        1120,
        0
      ],
      "webhookId": "4f53883b-bdba-4a69-b6df-c348eddb6891",
      "parameters": {
        "text": "=Done\n---\n{{ $json.output }}",
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "credentials": {
        "telegramApi": {
          "id": "OymlVCuTPYhVa2B9",
          "name": "Telegram account"
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "6e233d78-ded3-4aeb-aa62-92739976ca9b",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        60,
        160
      ],
      "parameters": {
        "color": 3,
        "width": 380,
        "height": 300,
        "content": "## LLMs\nBase + Fallback"
      },
      "typeVersion": 1
    },
    {
      "id": "6278fa4a-d1a9-42c3-9eb2-6e014906340e",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        500,
        160
      ],
      "parameters": {
        "width": 420,
        "height": 300,
        "content": "## Tools\n- Explain: extra info is required\n- Get: check events on specified period\n- Create: adds an event"
      },
      "typeVersion": 1
    },
    {
      "id": "2b442fd4-7620-43eb-a6bc-32a52f08fdd9",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1020,
        -80
      ],
      "parameters": {
        "color": 6,
        "width": 320,
        "height": 260,
        "content": "## Send Result\n- Send result on same telegram chat"
      },
      "typeVersion": 1
    }
  ],
  "active": true,
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "d0b4f99d-d8dc-4bee-b14b-91ca97750066",
  "connections": {
    "Get": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Explain": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "4.1-nano": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Haiku 3.5": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}
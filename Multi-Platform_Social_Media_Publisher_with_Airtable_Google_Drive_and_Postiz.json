{
  "meta": {
    "instanceId": "3cc6c4256e2bbdec1b3708c49dc3889c7266357f3e239651c157c2de760e6c65"
  },
  "name": "social media content publishing",
  "tags": [],
  "nodes": [
    {
      "id": "b286e753-d483-4288-b777-55b4aaaa3a98",
      "name": "üìä Content Database (Media)",
      "type": "n8n-nodes-base.airtable",
      "notes": "üìã Fetches media and content from Airtable\n‚Ä¢ Table: Youtube tool (tblRnaXqxrvcQhqBw)\n‚Ä¢ Record: recuoYjg4icStHsMK\n‚Ä¢ Contains: Video/image file IDs, social content\n‚Ä¢ Fields: Short form Video, Image for socials\nüîó Feeds into media download and upload pipeline",
      "position": [
        1440,
        300
      ],
      "parameters": {
        "id": "={{ $json.query.RecordId }}",
        "base": {
          "mode": "list",
          "value": "appTFomwpoQ8GVsSo"
        },
        "table": {
          "mode": "list",
          "value": "tblRnaXqxrvcQhqBw"
        },
        "options": {}
      },
      "credentials": {
        "airtableTokenApi": {
          "id": "qzdthb44cvi2IEO0",
          "name": "Airtable Personal Access Token account 2"
        }
      },
      "typeVersion": 2.1
    },
    {
      "id": "70607089-3c8d-42ec-8626-d51740cb9c75",
      "name": "üìπ Video Upload to Postiz",
      "type": "n8n-nodes-base.httpRequest",
      "notes": "üîÑ Uploads video files to Postiz storage\n‚Ä¢ Endpoint: POST /upload\n‚Ä¢ Content-Type: multipart-form-data\n‚Ä¢ Input: Binary video data from Google Drive\n‚Ä¢ Output: Postiz file ID and path\n‚Ä¢ Required: Videos must be uploaded before posting\n‚ö†Ô∏è Cannot use external URLs in Postiz posts",
      "position": [
        1880,
        100
      ],
      "parameters": {
        "url": "=https://postiz.yourdomain.com/api/public/v1/upload",
        "method": "POST",
        "options": {},
        "sendBody": true,
        "contentType": "multipart-form-data",
        "authentication": "genericCredentialType",
        "bodyParameters": {
          "parameters": [
            {
              "name": "file",
              "parameterType": "formBinaryData",
              "inputDataFieldName": "data"
            }
          ]
        },
        "genericAuthType": "httpHeaderAuth"
      },
      "credentials": {
        "httpHeaderAuth": {
          "id": "mEU0ecS6LOVkcowP",
          "name": "Postiz"
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "044473a4-12ba-48f1-ba2a-f6cea1d7d157",
      "name": "üíæ Save Video Path",
      "type": "n8n-nodes-base.airtable",
      "notes": "üîÑ Updates Airtable with Postiz video path\n‚Ä¢ Operation: Update record\n‚Ä¢ Field: 'postiz video' = upload response path\n‚Ä¢ Maintains data consistency across systems\n‚Ä¢ Enables future reference to uploaded videos\nüìù Links Google Drive ‚Üí Postiz ‚Üí Airtable chain",
      "position": [
        2100,
        100
      ],
      "parameters": {
        "base": {
          "mode": "list",
          "value": "appTFomwpoQ8GVsSo"
        },
        "table": {
          "mode": "list",
          "value": "tblRnaXqxrvcQhqBw"
        },
        "columns": {
          "value": {
            "id": "={{ $('üìä Content Database (Media)').item.json.id }}",
            "postiz video": "={{ $json.path }}"
          },
          "schema": [
            {
              "id": "id",
              "type": "string",
              "display": true,
              "readOnly": true,
              "required": false,
              "displayName": "id",
              "defaultMatch": true
            },
            {
              "id": "Name",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "Name",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "recordid",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": true,
              "required": false,
              "displayName": "recordid",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "google drive",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "google drive",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "transcript",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "transcript",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "initial script",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "initial script",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "start",
              "type": "boolean",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "start",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "upload media",
              "type": "boolean",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "upload media",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Post to socials",
              "type": "boolean",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "Post to socials",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Post shorts",
              "type": "boolean",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "Post shorts",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "youtube_title",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "youtube_title",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "youtube_description",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "youtube_description",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "youtube_thumbnail_text",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "youtube_thumbnail_text",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "twitter single",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "twitter single",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "twitter_thread",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "twitter_thread",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "linkedin_post",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "linkedin_post",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "facebook_post",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "facebook_post",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "facebook_story_caption",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "facebook_story_caption",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "instagram_post",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "instagram_post",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "instagram_reel",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "instagram_reel",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "tiktok_caption",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "tiktok_caption",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "youtube_shorts_caption",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "youtube_shorts_caption",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Short form Video",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "Short form Video",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Image for socials",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "Image for socials",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "postiz image",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "postiz image",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "postiz video",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "postiz video",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Record ID",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": true,
              "required": false,
              "displayName": "Record ID",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [
            "id"
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {},
        "operation": "update"
      },
      "typeVersion": 2.1
    },
    {
      "id": "052ba337-dba8-4451-8ca2-39862314fa4b",
      "name": "üñºÔ∏è Image Upload to Postiz",
      "type": "n8n-nodes-base.httpRequest",
      "notes": "üîÑ Uploads image files to Postiz storage\n‚Ä¢ Endpoint: POST /upload\n‚Ä¢ Content-Type: multipart-form-data\n‚Ä¢ Input: Binary image data from Google Drive\n‚Ä¢ Output: Postiz file ID and path for posts\n‚Ä¢ Supports: JPG, PNG, GIF formats\nüì± Used across Instagram, Twitter, LinkedIn, Facebook",
      "position": [
        1880,
        300
      ],
      "parameters": {
        "url": "=https://postiz.yourdomain.com/api/public/v1/upload",
        "method": "POST",
        "options": {},
        "sendBody": true,
        "contentType": "multipart-form-data",
        "authentication": "genericCredentialType",
        "bodyParameters": {
          "parameters": [
            {
              "name": "file",
              "parameterType": "formBinaryData",
              "inputDataFieldName": "data"
            }
          ]
        },
        "genericAuthType": "httpHeaderAuth"
      },
      "credentials": {
        "httpHeaderAuth": {
          "id": "mEU0ecS6LOVkcowP",
          "name": "Postiz"
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "98f5db1d-92da-4120-9ad6-d615d4112f94",
      "name": "üíæ Save Image Path",
      "type": "n8n-nodes-base.airtable",
      "notes": "üîÑ Updates Airtable with Postiz image path\n‚Ä¢ Operation: Update record\n‚Ä¢ Field: 'postiz image' = upload response path\n‚Ä¢ Used by all image-based social posts\n‚Ä¢ Maintains referential integrity\nüìä Enables tracking of media usage across platforms",
      "position": [
        2100,
        300
      ],
      "parameters": {
        "base": {
          "mode": "list",
          "value": "appTFomwpoQ8GVsSo"
        },
        "table": {
          "mode": "list",
          "value": "tblRnaXqxrvcQhqBw"
        },
        "columns": {
          "value": {
            "id": "={{ $('üìä Content Database (Media)').item.json.id }}",
            "postiz image": "={{ $json.path }}"
          },
          "schema": [
            {
              "id": "id",
              "type": "string",
              "display": true,
              "readOnly": true,
              "required": false,
              "displayName": "id",
              "defaultMatch": true
            },
            {
              "id": "Name",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "Name",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "recordid",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": true,
              "required": false,
              "displayName": "recordid",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "google drive",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "google drive",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "transcript",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "transcript",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "initial script",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "initial script",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "start",
              "type": "boolean",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "start",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "upload media",
              "type": "boolean",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "upload media",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Post to socials",
              "type": "boolean",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "Post to socials",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Post shorts",
              "type": "boolean",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "Post shorts",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "youtube_title",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "youtube_title",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "youtube_description",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "youtube_description",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "youtube_thumbnail_text",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "youtube_thumbnail_text",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "twitter single",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "twitter single",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "twitter_thread",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "twitter_thread",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "linkedin_post",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "linkedin_post",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "facebook_post",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "facebook_post",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "facebook_story_caption",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "facebook_story_caption",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "instagram_post",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "instagram_post",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "instagram_reel",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "instagram_reel",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "tiktok_caption",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "tiktok_caption",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "youtube_shorts_caption",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "youtube_shorts_caption",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Short form Video",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "Short form Video",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Image for socials",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "Image for socials",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "postiz image",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "postiz image",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "postiz video",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "postiz video",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Record ID",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": true,
              "required": false,
              "displayName": "Record ID",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [
            "id"
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {},
        "operation": "update"
      },
      "typeVersion": 2.1
    },
    {
      "id": "e93e3769-7209-4134-ba6c-586e440b2c86",
      "name": "üì• Download Video from Drive",
      "type": "n8n-nodes-base.googleDrive",
      "notes": "‚òÅÔ∏è Downloads video from Google Drive\n‚Ä¢ Input: Google Drive file ID from Airtable\n‚Ä¢ Field: 'Short form Video'\n‚Ä¢ Output: Binary video data\n‚Ä¢ Formats: MP4, MOV, AVI supported\nüîó Feeds directly into Postiz upload pipeline",
      "position": [
        1660,
        100
      ],
      "parameters": {
        "fileId": "{{FILEID_ID}}",
        "options": {},
        "operation": "download"
      },
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "cMdQMNaewaEQ6Mi3",
          "name": "Google Drive account"
        }
      },
      "typeVersion": 3
    },
    {
      "id": "ec6aa9d3-584a-4fb7-a526-765b48e5b2cf",
      "name": "üì• Download Image from Drive",
      "type": "n8n-nodes-base.googleDrive",
      "notes": "‚òÅÔ∏è Downloads image from Google Drive\n‚Ä¢ Input: Google Drive file ID from Airtable\n‚Ä¢ Field: 'Image for socials'\n‚Ä¢ Output: Binary image data\n‚Ä¢ Used across all visual social platforms\nüì± Optimized for social media dimensions",
      "position": [
        1660,
        300
      ],
      "parameters": {
        "fileId": "{{FILEID_ID}}",
        "options": {},
        "operation": "download"
      },
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "cMdQMNaewaEQ6Mi3",
          "name": "Google Drive account"
        }
      },
      "typeVersion": 3
    },
    {
      "id": "eed5e518-e6ba-4a07-89a5-eb254edcd4ec",
      "name": "üìù Workflow Documentation",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        0
      ],
      "parameters": {
        "width": 2390,
        "height": 900,
        "content": " ## üìù POSTIZ MEDIA UPLOAD WORKFLOW\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nüéØ PURPOSE:\nAutomated media upload pipeline that downloads videos and images from Google Drive and uploads them to Postiz storage for social media posting.\n\nüîÑ WORKFLOW PROCESS:\n1. Webhook triggers the workflow\n2. Fetch media metadata from Airtable\n3. Download video + image from Google Drive\n4. Upload both files to Postiz storage\n5. Save Postiz file paths back to Airtable\n\nüîß TECHNICAL DETAILS:\n‚Ä¢ API: Postiz /upload endpoint (multipart-form-data)\n‚Ä¢ Storage: Converts Google Drive files ‚Üí Postiz URLs\n‚Ä¢ Integration: Updates Airtable with Postiz paths\n‚Ä¢ Required: All media must be uploaded before posting\n\n\n\n\n\n\n\n\n‚ö†Ô∏è CRITICAL NOTES:\n‚Ä¢ Cannot use external URLs in Postiz posts\n‚Ä¢ Files must be uploaded to google drive first - id referenced in airtable\n‚Ä¢ Enables reference tracking for all platforms\n\nüìä DATA FLOW:\nGoogle Drive ‚Üí Download ‚Üí Postiz Upload ‚Üí Airtable Update\n\nüîó CONNECTS TO:\nMain social media posting workflows that reference these uploaded file paths for Instagram, Twitter, LinkedIn, Facebook, and YouTube posting.\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
      },
      "typeVersion": 1
    },
    {
      "id": "005cadcd-777a-4718-a4fd-8c601c7030c1",
      "name": "üîó integrations",
      "type": "n8n-nodes-base.httpRequest",
      "notes": "üìã Fetches all connected social media integrations from Postiz\n‚Ä¢ Gets integration IDs for Instagram, Twitter, LinkedIn, etc.\n‚Ä¢ Required for platform-specific posting\n‚Ä¢ Returns: id, name, identifier, disabled status",
      "position": [
        1080,
        1380
      ],
      "parameters": {
        "url": "https://postiz.yourdomain.com/api/public/v1/integrations",
        "options": {},
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth"
      },
      "credentials": {
        "httpHeaderAuth": {
          "id": "mEU0ecS6LOVkcowP",
          "name": "Postiz"
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "2d6f74c0-e556-4700-97bc-1b1e2237e03e",
      "name": "üîÄ Platform Router",
      "type": "n8n-nodes-base.switch",
      "notes": "üéØ Routes integrations to appropriate posting workflows\n‚Ä¢ Instagram: cmcotolny0001pnal2i86mkrh\n‚Ä¢ Twitter Alt: cmcg6ifpn001hmx9gakul0358\n‚Ä¢ Twitter Main: cmcf026ts0001mx9g6o8t5xc4\n‚Ä¢ LinkedIn: linkedin-page identifier\n‚Ä¢ Facebook: facebook identifier\n‚Ä¢ YouTube: youtube identifier\n‚ö†Ô∏è Integration IDs are unique per Postiz installation",
      "position": [
        1320,
        1320
      ],
      "parameters": {
        "rules": {
          "values": [
            {
              "outputKey": "instagram",
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "3fc7d2c2-cd01-46ec-b4d1-6e4966722314",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.id }}",
                    "rightValue": "=cmcotolny0001pnal2i86mkrh"
                  }
                ]
              },
              "renameOutput": true
            },
            {
              "outputKey": "x alt",
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "6236f9fa-bd4c-46c3-bfbb-4d50c7461fcb",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.id }}",
                    "rightValue": "cmcg6ifpn001hmx9gakul0358"
                  }
                ]
              },
              "renameOutput": true
            },
            {
              "outputKey": "x main",
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "c0c50e74-7492-4009-9abc-9240cb69d135",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.id }}",
                    "rightValue": "cmcf026ts0001mx9g6o8t5xc4"
                  }
                ]
              },
              "renameOutput": true
            },
            {
              "outputKey": "linkedin-page",
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "88d69331-8d87-48ef-85de-75404b9569d3",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.identifier }}",
                    "rightValue": "linkedin-page"
                  }
                ]
              },
              "renameOutput": true
            },
            {
              "outputKey": "facebook",
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "d5f1681e-2384-46f4-adcb-65ccc08e7606",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.identifier }}",
                    "rightValue": "facebook"
                  }
                ]
              },
              "renameOutput": true
            },
            {
              "outputKey": "youtube",
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "047aae0a-c0f8-44b2-bc41-203287526cb5",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.identifier }}",
                    "rightValue": "youtube"
                  }
                ]
              },
              "renameOutput": true
            }
          ]
        },
        "options": {}
      },
      "typeVersion": 3.2
    },
    {
      "id": "7f44b9a2-fa18-4f85-8e8b-0df193e817e3",
      "name": "üê¶ X/Twitter Posts",
      "type": "n8n-nodes-base.httpRequest",
      "notes": "üì± Posts to Twitter/X using Postiz API\n‚Ä¢ Uses cleaned 'twitter single' content from Airtable\n‚Ä¢ Includes image from 'postiz image' field\n‚Ä¢ Posts immediately (type: 'now')\n‚Ä¢ Settings: type='post' for regular tweets\nüí° Content must be cleaned to prevent JSON errors",
      "position": [
        1820,
        1180
      ],
      "parameters": {
        "url": "https://postiz.yourdomain.com/api/public/v1/posts",
        "method": "POST",
        "options": {},
        "jsonBody": "={\n   \"type\": \"now\",\n  \"date\": \"{{ $now.plus(1, 'minute').toISO() }}\",\n  \"order\": \"\",\n  \"shortLink\": true,\n  \"inter\": 0,\n  \n  \"tags\": [\n    {\n      \"value\": \"\",\n      \"label\": \"\"\n    }\n  ],\n \"posts\": [\n    {\n      \"integration\": {\n        \"id\": \"{{ $json.id }}\"\n      },\n      \"value\": [\n        {\n          \"content\": \"{{ $('üìä Content Database (Posts)').item.json['twitter single'] }}\",\n          \"image\": [\n            {\n              \"id\": \"1\",\n              \"path\": \"{{ $('üìä Content Database (Posts)').item.json.postiz_twitter }}\"\n            }\n          ]\n        }\n      ],\n       \"settings\": {\n          \"type\": \"post\"\n        }\n      }\n      ]\n}",
        "sendBody": true,
        "specifyBody": "json",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth"
      },
      "credentials": {
        "httpHeaderAuth": {
          "id": "mEU0ecS6LOVkcowP",
          "name": "Postiz"
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "25817540-d225-432b-9e09-b766d2817947",
      "name": "üíº LinkedIn Publisher",
      "type": "n8n-nodes-base.httpRequest",
      "notes": "üìä Posts professional content to LinkedIn\n‚Ä¢ Uses cleaned 'linkedin_post' content (processed by Code2)\n‚Ä¢ Targets LinkedIn Pages (business accounts)\n‚Ä¢ Professional formatting and tone\n‚Ä¢ Image support for visual content\n‚úÖ Content cleaning prevents JSON formatting errors",
      "position": [
        1840,
        1540
      ],
      "parameters": {
        "url": "https://postiz.yourdomain.com/api/public/v1/posts",
        "method": "POST",
        "options": {},
        "jsonBody": "={\n   \"type\": \"now\",\n  \"date\": \"{{ $now.plus(1, 'minute').toISO() }}\",\n  \"order\": \"\",\n  \"shortLink\": true,\n  \"inter\": 0,\n  \n  \"tags\": [\n    {\n      \"value\": \"\",\n      \"label\": \"\"\n    }\n  ],\n \"posts\": [\n    {\n      \"integration\": {\n        \"id\": \"{{ $json.id }}\"\n      },\n      \"value\": [\n        {\n          \"content\": \"{{ $json.linkedin_post }}\",\n          \"image\": [\n            {\n              \"id\": \"1\",\n              \"path\": \"{{ $('üìä Content Database (Posts)').item.json['postiz image'] }}\"\n            }\n          ]\n        }\n      ],\n       \"settings\": {\n          \"type\": \"post\"\n        }\n      }\n      ]\n}",
        "sendBody": true,
        "specifyBody": "json",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth"
      },
      "credentials": {
        "httpHeaderAuth": {
          "id": "mEU0ecS6LOVkcowP",
          "name": "Postiz"
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "4b40a5d7-d62e-4ad8-be51-cad72578c102",
      "name": "üê¶ X/Twitter Alt Account",
      "type": "n8n-nodes-base.httpRequest",
      "notes": "üì± Alternative Twitter/X account posting\n‚Ä¢ Duplicate of main Twitter posting for secondary account\n‚Ä¢ Uses same 'twitter single' content\n‚Ä¢ Different integration ID for alt account\n‚Ä¢ Maintains consistency across multiple X accounts\nüîÑ Part of multi-account social strategy",
      "position": [
        1840,
        1360
      ],
      "parameters": {
        "url": "https://postiz.yourdomain.com/api/public/v1/posts",
        "method": "POST",
        "options": {},
        "jsonBody": "={\n   \"type\": \"now\",\n  \"date\": \"{{ $now.plus(1, 'minute').toISO() }}\",\n  \"order\": \"\",\n  \"shortLink\": true,\n  \"inter\": 0,\n  \n  \"tags\": [\n    {\n      \"value\": \"\",\n      \"label\": \"\"\n    }\n  ],\n \"posts\": [\n    {\n      \"integration\": {\n        \"id\": \"{{ $json.id }}\"\n      },\n      \"value\": [\n        {\n          \"content\": \"{{ $('üìä Content Database (Posts)').item.json['twitter single'] }}\",\n          \"image\": [\n            {\n              \"id\": \"1\",\n                  \"path\": \"{{ $('üìä Content Database (Posts)').item.json.postiz_twitter }}\"\n\n            }\n          ]\n        }\n      ]\n       }\n      ]\n}",
        "sendBody": true,
        "specifyBody": "json",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth"
      },
      "credentials": {
        "httpHeaderAuth": {
          "id": "mEU0ecS6LOVkcowP",
          "name": "Postiz"
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "d1ae77ee-cd24-4556-a2b8-cbc6e03a0890",
      "name": "üßπ Instagram Content Cleaner",
      "type": "n8n-nodes-base.code",
      "notes": "‚ö†Ô∏è CRITICAL: Fixes JSON formatting issues\n‚Ä¢ Removes line breaks (\\n), carriage returns (\\r), tabs (\\t)\n‚Ä¢ Replaces multiple spaces with single spaces\n‚Ä¢ Prevents 'JSON parameter needs to be valid JSON' errors\n‚Ä¢ Essential for Instagram caption processing\nüö´ Without this: API calls fail with malformed JSON",
      "position": [
        1540,
        1080
      ],
      "parameters": {
        "jsCode": "// üßπ INSTAGRAM CONTENT CLEANER\n// Critical: Prevents 'JSON parameter needs to be valid JSON' errors\nlet content = $('üìä Content Database (Posts)').item.json.instagram_post;\n\ncontent = content\n  .replace(/[\\n\\r\\t]+/g, ' ')    // Replace all line breaks and tabs with spaces\n  .replace(/\\s{2,}/g, ' ')       // Replace multiple spaces with single space\n  .trim();                       // Remove leading/trailing whitespace\n\nreturn [{\n  json: {\n    ...items[0].json,\n    instagram_post: content\n  }\n}];"
      },
      "typeVersion": 2
    },
    {
      "id": "4df5a42d-013a-4842-a917-2e079da7a486",
      "name": "üì∏ Instagram Publisher",
      "type": "n8n-nodes-base.httpRequest",
      "notes": "üì± Posts visual content to Instagram\n‚Ä¢ Uses cleaned 'instagram_caption' (processed by Code1)\n‚Ä¢ Requires image for all Instagram posts\n‚Ä¢ Tags: 'instagram' for tracking\n‚Ä¢ Settings: type='post' for feed posts\n‚úÖ Working configuration with proper content cleaning",
      "position": [
        1820,
        1000
      ],
      "parameters": {
        "url": "https://postiz.yourdomain.com/api/public/v1/posts",
        "method": "POST",
        "options": {},
        "jsonBody": "={\n  \"type\": \"now\",\n  \"date\": \"{{ $now.plus(1, 'minute').toISO() }}\",\n  \"shortLink\": true,\n  \"tags\": [\n    { \"value\": \"instagram\", \"label\": \"Instagram\" }\n  ],\n  \"posts\": [\n    {\n      \"integration\": {\n        \"id\": \"{{ $json.id }}\"\n      },\n      \"value\": [\n        {\n          \"content\": \"{{ $json.instagram_post }}\",\n          \"image\": [\n            {\n              \"id\": \"1\",\n              \"path\": \"{{ $('üìä Content Database (Posts)').item.json['postiz image'] }}\"\n            }\n          ]\n        }\n      ],\n       \"settings\": {\n          \"type\": \"post\"\n        }\n      }\n      ]\n}",
        "sendBody": true,
        "specifyBody": "json",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth"
      },
      "credentials": {
        "httpHeaderAuth": {
          "id": "mEU0ecS6LOVkcowP",
          "name": "Postiz"
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "c5ae7985-3f36-4225-bb64-4c2b674a2fe0",
      "name": "üìä Content Database (Posts)",
      "type": "n8n-nodes-base.airtable",
      "notes": "üìã Fetches social media content from Airtable\n‚Ä¢ Same table/record as media source\n‚Ä¢ Contains: platform-specific post content\n‚Ä¢ Fields: instagram_caption, linkedin_post, twitter single, faceboook\n‚Ä¢ Feeds content into cleaning and posting workflows\nüîÑ Central content repository for all platforms",
      "position": [
        740,
        1380
      ],
      "parameters": {
        "id": "={{ $json.query.RecordId }}",
        "base": {
          "mode": "list",
          "value": "appTFomwpoQ8GVsSo"
        },
        "table": {
          "mode": "list",
          "value": "tblRnaXqxrvcQhqBw"
        },
        "options": {}
      },
      "credentials": {
        "airtableTokenApi": {
          "id": "qzdthb44cvi2IEO0",
          "name": "Airtable Personal Access Token account 2"
        }
      },
      "typeVersion": 2.1
    },
    {
      "id": "a0f582b4-aa2c-4bc0-b9cb-2033d5e23d09",
      "name": "üßπ LinkedIn Content Cleaner",
      "type": "n8n-nodes-base.code",
      "notes": "‚ö†Ô∏è CRITICAL: Fixes JSON formatting for LinkedIn\n‚Ä¢ Same cleaning logic as Instagram cleaner\n‚Ä¢ Removes problematic characters: \\n, \\r, \\t\n‚Ä¢ Prevents API failures with malformed JSON\n‚Ä¢ Essential for LinkedIn professional content\nüíº Maintains professional formatting while ensuring JSON validity",
      "position": [
        1640,
        1540
      ],
      "parameters": {
        "jsCode": "// üßπ LINKEDIN CONTENT CLEANER\n// Critical: Prevents 'JSON parameter needs to be valid JSON' errors\nlet content = $('üìä Content Database (Posts)').item.json.linkedin_post;\n\ncontent = content\n  .replace(/[\\n\\r\\t]+/g, ' ')    // Replace all line breaks and tabs with spaces\n  .replace(/\\s{2,}/g, ' ')       // Replace multiple spaces with single space\n  .trim();                       // Remove leading/trailing whitespace\n\nreturn [{\n  json: {\n    ...items[0].json,\n    linkedin_post: content\n  }\n}];"
      },
      "typeVersion": 2
    },
    {
      "id": "5efa8626-343b-4ac9-a489-596d3404fd07",
      "name": "üìò Facebook Publisher",
      "type": "n8n-nodes-base.httpRequest",
      "notes": "üì± Posts content to Facebook\n‚Ä¢ Uses cleaned 'faceboook' content (processed by Code3)\n‚Ä¢ Supports both images and videos\n‚Ä¢ Similar functionality to Instagram\n‚Ä¢ Settings: type='post' for feed posts\nüîµ Part of Meta ecosystem alongside Instagram",
      "position": [
        1840,
        1740
      ],
      "parameters": {
        "url": "https://postiz.yourdomain.com/api/public/v1/posts",
        "method": "POST",
        "options": {},
        "jsonBody": "={\n   \"type\": \"now\",\n  \"date\": \"{{ $now.plus(1, 'minute').toISO() }}\",\n  \"order\": \"\",\n  \"shortLink\": true,\n  \"inter\": 0,\n  \n  \"tags\": [\n    {\n      \"value\": \"\",\n      \"label\": \"\"\n    }\n  ],\n \"posts\": [\n    {\n      \"integration\": {\n        \"id\": \"{{ $json.id }}\"\n      },\n      \"value\": [\n        {\n          \"content\": \"{{ $json.faceboook_post }}\",\n          \"image\": [\n            {\n              \"id\": \"1\",\n              \"path\": \"{{ $('üìä Content Database (Posts)').item.json['postiz image'] }}\"\n            }\n          ]\n        }\n      ],\n       \"settings\": {\n          \"type\": \"post\"\n        }\n      }\n      ]\n}",
        "sendBody": true,
        "specifyBody": "json",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth"
      },
      "credentials": {
        "httpHeaderAuth": {
          "id": "mEU0ecS6LOVkcowP",
          "name": "Postiz"
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "805df154-3f9e-493c-b950-7c2b59fe62e7",
      "name": "üßπ Facebook Content Cleaner",
      "type": "n8n-nodes-base.code",
      "notes": "‚ö†Ô∏è CRITICAL: Fixes JSON formatting for Facebook\n‚Ä¢ Cleans 'faceboook' field from Airtable\n‚Ä¢ Same regex patterns as other cleaners\n‚Ä¢ Prevents JSON parsing errors in API calls\n‚Ä¢ Essential for Facebook posting reliability\nüìò Part of Meta content processing pipeline",
      "position": [
        1640,
        1740
      ],
      "parameters": {
        "jsCode": "// üßπ FACEBOOK CONTENT CLEANER\n// Critical: Prevents 'JSON parameter needs to be valid JSON' errors\nlet content = $('üìä Content Database (Posts)').item.json.facebook_post;\n\ncontent = content\n  .replace(/[\\n\\r\\t]+/g, ' ')    // Replace all line breaks and tabs with spaces\n  .replace(/\\s{2,}/g, ' ')       // Replace multiple spaces with single space\n  .trim();                       // Remove leading/trailing whitespace\n\nreturn [{\n  json: {\n    ...items[0].json,\n    faceboook_post: content\n  }\n}];"
      },
      "typeVersion": 2
    },
    {
      "id": "197238c4-a400-4d12-858d-e5a0379f7a77",
      "name": "üìù Complete Workflow Guide",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        980
      ],
      "parameters": {
        "color": 3,
        "width": 2400,
        "height": 1200,
        "content": "## üì± SOCIAL MEDIA POSTING WORKFLOW\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nüéØ PURPOSE:\nAutomated multi-platform social media posting using Postiz API. Distributes content across Instagram, Twitter/X (2 accounts), LinkedIn, and Facebook with platform-specific content cleaning and formatting.\n\nüîÑ COMPLETE WORKFLOW PROCESS:\n1. üìä Fetch social media content from Airtable database\n2. üîó Get integration IDs for all connected social platforms\n3. üîÄ Route each platform to appropriate content processor\n4. üßπ Clean content to prevent JSON formatting errors\n5. üì± Post to respective social media platforms simultaneously\n\nüìã PLATFORM COVERAGE:\n‚Ä¢ üì∏ Instagram (Visual content + captions)\n‚Ä¢ üê¶ Twitter/X Main Account (Text + images)\n‚Ä¢ üê¶ Twitter/X Alt Account (Duplicate posting)\n‚Ä¢ üíº LinkedIn (Professional content)\n‚Ä¢ üìò Facebook (Meta ecosystem posting)\n\n‚ö†Ô∏è CRITICAL CONTENT CLEANING:\n‚Ä¢ Removes line breaks (\\n), carriage returns (\\r), tabs (\\t)\n‚Ä¢ Replaces multiple spaces with single spaces\n‚Ä¢ Prevents 'JSON parameter needs to be valid JSON' errors\n‚Ä¢ ESSENTIAL: Without cleaning, all API calls fail!\n\nüîß TECHNICAL SPECIFICATIONS:\n‚Ä¢ API: Postiz /posts endpoint (POST)\n‚Ä¢ Authentication: HTTP Header Auth\n‚Ä¢ Content-Type: application/json\n‚Ä¢ Posting Type: Immediate ('now') + 1 minute delay\n‚Ä¢ Media: References pre-uploaded Postiz image paths\n‚Ä¢ Rate Limit: 30 requests/hour (API beta limitation)\n\nüîó DATA SOURCES:\n‚Ä¢ Content: Airtable \n‚Ä¢ Media: Pre-uploaded via separate media upload workflow\n‚Ä¢ Fields: instagram_caption, linkedin_post, twitter single, faceboook\n‚Ä¢ Images: References 'postiz image' field paths\n\n‚ö° EXECUTION FLOW:\nAirtable ‚Üí Integrations ‚Üí Platform Router ‚Üí Content Cleaners ‚Üí Social Publishers\n\nüö® TROUBLESHOOTING:\n‚Ä¢ JSON Errors: Check content cleaning nodes\n‚Ä¢ 500 Errors: Verify integration IDs and account connections\n‚Ä¢ Missing Media: Ensure media upload workflow ran first\n‚Ä¢ Rate Limits: Space out executions (30/hour limit)\n\nüîÑ DEPENDENCIES:\n‚Ä¢ Requires: Media upload workflow (for image/video paths)\n‚Ä¢ Connects to: Analytics and monitoring workflows\n‚Ä¢ Updates: Airtable with posting status and URLs\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
      },
      "typeVersion": 1
    },
    {
      "id": "4fcdcc17-949a-4b2f-ae70-a22e0f2da504",
      "name": "üé¨ YouTube Publisher",
      "type": "n8n-nodes-base.httpRequest",
      "notes": "üì∫ Posts content to YouTube (Note: Uses Facebook content)\n‚Ä¢ Currently using 'faceboook' content field\n‚Ä¢ Uses 'postiz image' instead of video\n‚Ä¢ May need adjustment for proper YouTube video posting\n‚Ä¢ YouTube typically requires video content, not images\n‚ö†Ô∏è Configuration may need refinement for YouTube specifics",
      "position": [
        1880,
        2940
      ],
      "parameters": {
        "url": "https://postiz.yourdomain.com/api/public/v1/posts",
        "method": "POST",
        "options": {},
        "jsonBody": "={\n \"type\": \"now\",\n \"date\": \"{{ $now.plus(1, 'minute').toISO() }}\",\n \"order\": \"\",\n \"shortLink\": true,\n \"inter\": 0,\n \"tags\": [\n   {\n     \"value\": \"\",\n     \"label\": \"\"\n   }\n ],\n \"posts\": [\n   {\n     \"integration\": {\n       \"id\": \"{{ $json.id }}\"\n     },\n     \"value\": [\n       {\n         \"content\": \"{{ $('üìä Content Database (Video)').item.json.youtube_shorts_caption }}\",\n         \"image\": [\n           {\n             \"id\": \"1\",\n             \"path\": \"{{ $('üìä Content Database (Video)').item.json['postiz video'] }}\"\n           }\n         ]\n       }\n     ],\n     \"settings\": {\n       \"__type\": \"youtube\",\n       \"title\": \"{{ $('üìä Content Database (Video)').item.json.youtube_title }}\",\n       \"type\": \"public\",\n       \"tags\": [\"tag1\", \"tag2\"],\n       \"categoryId\": \"22\",\n       \"madeForKids\": false\n     }\n   }\n ]\n}",
        "sendBody": true,
        "specifyBody": "json",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth"
      },
      "credentials": {
        "httpHeaderAuth": {
          "id": "mEU0ecS6LOVkcowP",
          "name": "Postiz"
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "48f59939-c58a-4837-8377-a412cbb2439e",
      "name": "üßπ Facebook Video Cleaner",
      "type": "n8n-nodes-base.code",
      "notes": "‚ö†Ô∏è CRITICAL: Content cleaner for Facebook videos\n‚Ä¢ Processes Facebook content for video posts\n‚Ä¢ References 'Airtable' node (video workflow)\n‚Ä¢ Same cleaning regex as other cleaners\n‚Ä¢ Prevents JSON formatting errors\nüìπ Part of Facebook video content pipeline",
      "position": [
        1580,
        2680
      ],
      "parameters": {
        "jsCode": "// üßπ FACEBOOK VIDEO CONTENT CLEANER\n// Critical: Prevents 'JSON parameter needs to be valid JSON' errors\nlet content = $('üìä Content Database (Video)').item.json.facebook_story_caption;\n\ncontent = content\n  .replace(/[\\n\\r\\t]+/g, ' ')    // Replace all line breaks and tabs with spaces\n  .replace(/\\s{2,}/g, ' ')       // Replace multiple spaces with single space\n  .trim();                       // Remove leading/trailing whitespace\n\nreturn [{\n  json: {\n    ...items[0].json,\n    facebook_story_caption: content\n  }\n}];"
      },
      "typeVersion": 2
    },
    {
      "id": "243b21a0-540c-4069-ac04-26b8ef107ebb",
      "name": "üìò Facebook Video Publisher",
      "type": "n8n-nodes-base.httpRequest",
      "notes": "üì± Posts video content to Facebook\n‚Ä¢ Uses Facebook content with '11111' test suffix\n‚Ä¢ References 'postiz video' for video content\n‚Ä¢ Part of Facebook video strategy\n‚Ä¢ Same API structure as other platforms\nüé¨ Facebook video content distribution",
      "position": [
        1880,
        2680
      ],
      "parameters": {
        "url": "https://postiz.yourdomain.com/api/public/v1/posts",
        "method": "POST",
        "options": {},
        "jsonBody": "={\n   \"type\": \"now\",\n  \"date\": \"{{ $now.plus(1, 'minute').toISO() }}\",\n  \"order\": \"\",\n  \"shortLink\": true,\n  \"inter\": 0,\n  \n  \"tags\": [\n    {\n      \"value\": \"\",\n      \"label\": \"\"\n    }\n  ],\n \"posts\": [\n    {\n      \"integration\": {\n        \"id\": \"{{ $json.id }}\"\n      },\n      \"value\": [\n        {\n          \"content\": \"{{ $('üìä Content Database (Video)').item.json.facebook_story_caption }}\",\n          \"image\": [\n            {\n              \"id\": \"1\",\n              \"path\": \"{{ $('üìä Content Database (Video)').item.json['postiz video'] }}\"\n            }\n          ]\n        }\n      ],\n       \"settings\": {\n          \"type\": \"post\"\n        }\n      }\n      ]\n}",
        "sendBody": true,
        "specifyBody": "json",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth"
      },
      "credentials": {
        "httpHeaderAuth": {
          "id": "mEU0ecS6LOVkcowP",
          "name": "Postiz"
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "d5d60a64-f453-4ebb-b72d-7bf3a2e94f10",
      "name": "üìä Content Database (Video)",
      "type": "n8n-nodes-base.airtable",
      "notes": "üìã Content source for video workflow\n‚Ä¢ Same table/record as other Airtable nodes\n‚Ä¢ Provides content for video-based posts\n‚Ä¢ Contains uploaded video paths ('postiz video')\n‚Ä¢ Feeds into video content processing\nüé¨ Specialized for video content distribution",
      "position": [
        880,
        2740
      ],
      "parameters": {
        "id": "={{ $json.query.RecordId }}",
        "base": {
          "mode": "list",
          "value": "appTFomwpoQ8GVsSo"
        },
        "table": {
          "mode": "list",
          "value": "tblRnaXqxrvcQhqBw"
        },
        "options": {}
      },
      "typeVersion": 2.1
    },
    {
      "id": "4c773e3c-6c88-41ea-b9a4-12f22a32f812",
      "name": "üìπ Instagram Video Publisher",
      "type": "n8n-nodes-base.httpRequest",
      "notes": "üì± Posts video content to Instagram\n‚Ä¢ Uses cleaned caption from video cleaner\n‚Ä¢ References 'postiz video' field (uploaded video)\n‚Ä¢ Can be used for Reels or regular video posts\n‚Ä¢ Same structure as image posts but with video\nüé¨ Supports Instagram's video content strategy",
      "position": [
        1880,
        2460
      ],
      "parameters": {
        "url": "https://postiz.yourdomain.com/api/public/v1/posts",
        "method": "POST",
        "options": {},
        "jsonBody": "={\n  \"type\": \"now\",\n  \"date\": \"{{ $now.plus(1, 'minute').toISO() }}\",\n  \"shortLink\": true,\n  \"tags\": [\n    { \"value\": \"instagram\", \"label\": \"Instagram\" }\n  ],\n  \"posts\": [\n    {\n      \"integration\": {\n        \"id\": \"{{ $json.id }}\"\n      },\n      \"value\": [\n        {\n          \"content\": \"{{ $json.instagram_reel }}\",\n          \"image\": [\n            {\n              \"id\": \"1\",\n              \"path\": \"{{ $('üìä Content Database (Video)').item.json['postiz video'] }}\"\n            }\n          ]\n        }\n      ],\n       \"settings\": {\n          \"type\": \"post\"\n        }\n      }\n      ]\n}",
        "sendBody": true,
        "specifyBody": "json",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth"
      },
      "credentials": {
        "httpHeaderAuth": {
          "id": "mEU0ecS6LOVkcowP",
          "name": "Postiz"
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "72144a39-2990-46a3-a034-7f876351f8b0",
      "name": "üßπ Instagram Video Cleaner",
      "type": "n8n-nodes-base.code",
      "notes": "‚ö†Ô∏è CRITICAL: Content cleaner for video workflow\n‚Ä¢ Same cleaning logic as image workflow\n‚Ä¢ Processes Instagram captions for video posts\n‚Ä¢ References different Airtable node ('Airtable' vs 'Airtable2')\n‚Ä¢ Prevents JSON errors in video posting\nüìπ Part of video-specific content pipeline",
      "position": [
        1580,
        2460
      ],
      "parameters": {
        "jsCode": "// üßπ INSTAGRAM VIDEO CONTENT CLEANER\n// Critical: Prevents 'JSON parameter needs to be valid JSON' errors\nlet content = $('üìä Content Database (Video)').item.json.instagram_reel;\n\ncontent = content\n  .replace(/[\\n\\r\\t]+/g, ' ')    // Replace all line breaks and tabs with spaces\n  .replace(/\\s{2,}/g, ' ')       // Replace multiple spaces with single space\n  .trim();                       // Remove leading/trailing whitespace\n\nreturn [{\n  json: {\n    ...items[0].json,\n    instagram_reel: content\n  }\n}];"
      },
      "typeVersion": 2
    },
    {
      "id": "a58ad06d-fcff-4a2b-b7dc-7ca7ca7e5327",
      "name": "üîÄ Video Platform Router",
      "type": "n8n-nodes-base.switch",
      "notes": "üéØ Routes video-based content to platforms\n‚Ä¢ Instagram: For video posts and reels\n‚Ä¢ Facebook: For video content\n‚Ä¢ YouTube: For long-form video uploads\n‚Ä¢ Simplified routing for video workflow\nüìπ Specialized for video content distribution",
      "position": [
        1320,
        2740
      ],
      "parameters": {
        "rules": {
          "values": [
            {
              "outputKey": "instagram",
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "3fc7d2c2-cd01-46ec-b4d1-6e4966722314",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.id }}",
                    "rightValue": "=cmcotolny0001pnal2i86mkrh"
                  }
                ]
              },
              "renameOutput": true
            },
            {
              "outputKey": "facebook",
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "d5f1681e-2384-46f4-adcb-65ccc08e7606",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.identifier }}",
                    "rightValue": "facebook"
                  }
                ]
              },
              "renameOutput": true
            },
            {
              "outputKey": "youtube",
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "047aae0a-c0f8-44b2-bc41-203287526cb5",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.identifier }}",
                    "rightValue": "youtube"
                  }
                ]
              },
              "renameOutput": true
            }
          ]
        },
        "options": {}
      },
      "typeVersion": 3.2
    },
    {
      "id": "16c129d8-4a74-43f7-8457-cb3c9122acf0",
      "name": "üîó integrations (Branch 2)",
      "type": "n8n-nodes-base.httpRequest",
      "notes": "üìã Secondary integrations fetch for video workflow\n‚Ä¢ Duplicate of main integrations node\n‚Ä¢ Supports video-based posting workflow\n‚Ä¢ Gets platform IDs for Instagram/Facebook video posts\n‚Ä¢ Enables parallel processing of different content types",
      "position": [
        1100,
        2740
      ],
      "parameters": {
        "url": "https://postiz.yourdomain.com/api/public/v1/integrations",
        "options": {},
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth"
      },
      "credentials": {
        "httpHeaderAuth": {
          "id": "mEU0ecS6LOVkcowP",
          "name": "Postiz"
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "25c76242-2527-4b09-8169-25f0d6e1821c",
      "name": "üìù Video Workflow Overview",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        20,
        2260
      ],
      "parameters": {
        "color": 4,
        "width": 2380,
        "height": 940,
        "content": "## üé¨ VIDEO POSTING WORKFLOW\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nüéØ PURPOSE:\nAutomated video content distribution across Instagram, Facebook, and YouTube using Postiz API. Specialized workflow for video content with platform-specific processing and cleaning.\n\nüîÑ WORKFLOW EXECUTION:\n1. üìä Fetch video content from Airtable database (recuoYjg4icStHsMK)\n2. üîó Get integration IDs for video-enabled platforms\n3. üîÄ Route platforms to appropriate video processors\n4. üßπ Clean content for Instagram & Facebook (YouTube bypassed)\n5. üìπ Publish to video platforms simultaneously\n\nüìπ PLATFORM COVERAGE:\n‚Ä¢ üì± Instagram: Video posts & Reels (‚úÖ Working)\n‚Ä¢ üìò Facebook: Video content (‚ö†Ô∏è Test mode)\n‚Ä¢ üé¨ YouTube: Long-form videos (üö® Broken)\n\n‚ö° EXECUTION FLOW:\nAirtable ‚Üí Integrations ‚Üí Video Router ‚Üí [3 Parallel Paths]\n‚îú‚îÄ‚îÄ Instagram: Cleaner ‚Üí Publisher\n‚îú‚îÄ‚îÄ Facebook: Cleaner ‚Üí Publisher  \n‚îî‚îÄ‚îÄ YouTube: [Direct] ‚Üí Publisher\n\nüóÑÔ∏è DATA SOURCE:\n‚Ä¢ Base: Netkreatives.com \n‚Ä¢ Table: Youtube tool \n‚Ä¢ Video Field: 'postiz video'\n‚Ä¢ Content Fields: instagram_caption, faceboook\n\n\nüîß TECHNICAL SPECS:\n‚Ä¢ Method: POST\n‚Ä¢ Auth: HTTP Header (Postiz credentials)\n‚Ä¢ Timing: Immediate posting (+1 minute delay)\n‚Ä¢ Media: Pre-uploaded video paths\n‚Ä¢ Content-Type: application/json"
      },
      "typeVersion": 1
    },
    {
      "id": "e12c5d52-cba9-4917-9a1c-17e44a550a13",
      "name": "üîç Content Validator & Cleaner1",
      "type": "n8n-nodes-base.code",
      "notes": "‚úÖ Comprehensive validation and cleaning\n‚Ä¢ Validates content for all platforms\n‚Ä¢ Character limit enforcement\n‚Ä¢ JSON-safe content cleaning\n‚Ä¢ Media availability checks\n‚Ä¢ Error and warning collection",
      "position": [
        740,
        1660
      ],
      "parameters": {
        "jsCode": "// üìä COMPREHENSIVE CONTENT VALIDATION & PREPARATION\nconst item = $input.first();\nconst data = item.json;\n\n// Validation results\nconst validation = {\n  hasContent: false,\n  hasMedia: false,\n  platforms: [],\n  errors: [],\n  warnings: []\n};\n\n// Content fields mapping\nconst contentFields = {\n  instagram: 'instagram_caption',\n  twitter: 'twitter single',\n  linkedin: 'linkedin_post',\n  facebook: 'faceboook'\n};\n\n// Media fields\nconst mediaFields = ['postiz image', 'postiz video'];\n\n// Validate content for each platform\nfor (const [platform, field] of Object.entries(contentFields)) {\n  if (data[field] && data[field].trim().length > 0) {\n    validation.platforms.push(platform);\n    validation.hasContent = true;\n  } else {\n    validation.warnings.push(`Missing ${platform} content in field '${field}'`);\n  }\n}\n\n// Validate media availability\nfor (const field of mediaFields) {\n  if (data[field] && data[field].trim().length > 0) {\n    validation.hasMedia = true;\n    break;\n  }\n}\n\nif (!validation.hasMedia) {\n  validation.warnings.push('No media files available (image or video)');\n}\n\n// Critical validations\nif (!validation.hasContent) {\n  validation.errors.push('No content available for any platform');\n}\n\nif (validation.platforms.length === 0) {\n  validation.errors.push('No valid platforms found with content');\n}\n\n// Prepare cleaned content for each platform\nconst cleanedContent = {};\nfor (const [platform, field] of Object.entries(contentFields)) {\n  if (data[field]) {\n    // Enhanced content cleaning\n    let content = data[field]\n      .replace(/[\\n\\r\\t]+/g, ' ')           // Line breaks and tabs\n      .replace(/\\s{2,}/g, ' ')             // Multiple spaces\n      .replace(/[\"']/g, (match) => match === '\"' ? '\\\"' : \"'\")  // Escape quotes\n      .replace(/[\\\\]/g, '\\\\\\\\')             // Escape backslashes\n      .trim();                             // Trim whitespace\n    \n    // Platform-specific length validation\n    const limits = {\n      twitter: 280,\n      instagram: 2200,\n      linkedin: 3000,\n      facebook: 63206\n    };\n    \n    if (content.length > limits[platform]) {\n      validation.warnings.push(`${platform} content exceeds ${limits[platform]} characters (${content.length})`);\n      content = content.substring(0, limits[platform] - 3) + '...';\n    }\n    \n    cleanedContent[platform] = content;\n  }\n}\n\nreturn [{\n  json: {\n    originalData: data,\n    validation: validation,\n    cleanedContent: cleanedContent,\n    recordId: data.id,\n    processedAt: new Date().toISOString(),\n    mediaAvailable: {\n      image: !!data['postiz image'],\n      video: !!data['postiz video'],\n      imagePath: data['postiz image'] || null,\n      videoPath: data['postiz video'] || null\n    }\n  }\n}];"
      },
      "typeVersion": 2
    },
    {
      "id": "b973a280-202c-4cc0-b691-e03506e525a0",
      "name": "üìã Content Availability Check1",
      "type": "n8n-nodes-base.if",
      "notes": "üîç Validates processed content\n‚Ä¢ Ensures content exists for posting\n‚Ä¢ Checks for critical validation errors\n‚Ä¢ Routes to error handling if needed\n‚Ä¢ Prevents unnecessary API calls",
      "position": [
        960,
        1660
      ],
      "parameters": {
        "options": {},
        "conditions": {
          "options": {
            "version": 1,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "has_content",
              "operator": {
                "type": "boolean",
                "operation": "equals"
              },
              "leftValue": "={{ $json.validation.hasContent }}",
              "rightValue": true
            },
            {
              "id": "no_errors",
              "operator": {
                "type": "number",
                "operation": "equals"
              },
              "leftValue": "={{ $json.validation.errors.length }}",
              "rightValue": 0
            }
          ]
        }
      },
      "typeVersion": 2
    },
    {
      "id": "bc714a0a-a511-466f-ac0c-754426bd12dc",
      "name": "‚ùå Content Error1",
      "type": "n8n-nodes-base.stopAndError",
      "notes": "üö´ Handles missing/invalid content\n‚Ä¢ Detailed validation results\n‚Ä¢ Platform-specific feedback\n‚Ä¢ Record identification\n‚Ä¢ Debugging information",
      "position": [
        1120,
        1840
      ],
      "parameters": {
        "errorMessage": "No valid content found for posting"
      },
      "typeVersion": 1
    },
    {
      "id": "b74388c2-6f88-4cf1-b098-88dad5287a37",
      "name": "üéØ Upload",
      "type": "n8n-nodes-base.webhook",
      "notes": "üöÄ Entry point for social media automation\n‚Ä¢ Webhook URL: /webhook/328d95ae-3de0-41bf-a8bf-52071bdb36d3\n‚Ä¢ Triggers entire posting workflow\n‚Ä¢ Can be called from external systems\n‚Ä¢ Starts both media upload and content posting processes",
      "position": [
        780,
        300
      ],
      "webhookId": "5f9b5e6f-cb89-44f5-ab63-81bb663b02e2",
      "parameters": {
        "path": "328d95ae-3de0-41bf-a8bf-52071bdb36d3",
        "options": {}
      },
      "typeVersion": 2
    },
    {
      "id": "92997282-93db-4a88-889f-ef56e9b13f39",
      "name": "Post",
      "type": "n8n-nodes-base.webhook",
      "position": [
        520,
        1380
      ],
      "webhookId": "7263d416-6333-429d-9767-528fc6dced38",
      "parameters": {
        "path": "7263d416-6333-429d-9767-528fc6dced38",
        "options": {}
      },
      "typeVersion": 2
    },
    {
      "id": "8c1ccf7a-8251-47d2-a378-3762aa8591bd",
      "name": "Video",
      "type": "n8n-nodes-base.webhook",
      "position": [
        600,
        2740
      ],
      "webhookId": "26fd48c7-7ef9-44ad-9816-feedd75426f4",
      "parameters": {
        "path": "26fd48c7-7ef9-44ad-9816-feedd75426f4",
        "options": {}
      },
      "typeVersion": 2
    },
    {
      "id": "b1edc2de-fcea-4e8c-a924-bc9da4f36e3c",
      "name": "üìä Fixed Results Processor",
      "type": "n8n-nodes-base.code",
      "notes": "üìà FIXED: Now correctly maps integration IDs to platforms\n‚Ä¢ Uses your exact integration IDs from Switch node\n‚Ä¢ Detects success via postId field\n‚Ä¢ Tracks all platforms correctly\n‚Ä¢ No more 'undefined' platforms!",
      "position": [
        2100,
        1400
      ],
      "parameters": {
        "jsCode": "// üìä FIXED RESULTS PROCESSOR (MINIMAL CHANGES)\nconst items = $input.all();\n\n// Integration ID to platform mapping (from your working Switch node)\nconst integrationToPlatform = {\n  'cmcotolny0001pnal2i86mkrh': { platform: 'instagram', account: 'main' },\n  'cmcg6ifpn001hmx9gakul0358': { platform: 'x', account: 'alt' },\n  'cmcf026ts0001mx9g6o8t5xc4': { platform: 'x', account: 'main' },\n  'cmcf02lp60003mx9gv2yff255': { platform: 'linkedin', account: 'main' },\n  'cmcf054k4000bmx9gg9va2ce1': { platform: 'facebook', account: 'main' },\n  'cmcouv8y00001kub0bb6cchea': { platform: 'youtube', account: 'main' }\n};\n\nconst results = {\n  totalPosts: items.length,\n  successful: 0,\n  failed: 0,\n  platforms: {},\n  errors: [],\n  postIds: [],\n  executionSummary: {\n    recordId: null,\n    startTime: new Date().toISOString(),\n    platforms: [],\n    overallStatus: 'success'\n  }\n};\n\n// Process each posting result\nfor (const item of items) {\n  const response = item.json;\n  \n  // Get platform info from integration ID in the response\n  const platformInfo = integrationToPlatform[response.integration] || { platform: 'unknown', account: 'main' };\n  const platform = platformInfo.platform;\n  const account = platformInfo.account;\n  \n  if (!results.platforms[platform]) {\n    results.platforms[platform] = {\n      attempted: 0,\n      successful: 0,\n      failed: 0,\n      accounts: {}\n    };\n  }\n  \n  results.platforms[platform].attempted++;\n  \n  if (!results.platforms[platform].accounts[account]) {\n    results.platforms[platform].accounts[account] = {\n      status: 'unknown',\n      postId: null,\n      error: null,\n      integrationId: response.integration\n    };\n  }\n  \n  // Check if the post was successful - Postiz returns 'postId' on success\n  if (response.postId && response.postId.length > 0) {\n    results.successful++;\n    results.platforms[platform].successful++;\n    results.platforms[platform].accounts[account].status = 'success';\n    results.platforms[platform].accounts[account].postId = response.postId;\n    results.postIds.push({\n      platform: platform,\n      account: account,\n      postId: response.postId,\n      integrationId: response.integration,\n      url: response.url || null\n    });\n  } else {\n    results.failed++;\n    results.platforms[platform].failed++;\n    results.platforms[platform].accounts[account].status = 'failed';\n    \n    // Extract error message\n    let errorMessage = 'Unknown error';\n    if (response.error) {\n      errorMessage = typeof response.error === 'string' ? response.error : JSON.stringify(response.error);\n    } else if (response.message) {\n      errorMessage = response.message;\n    } else if (!response.postId) {\n      errorMessage = 'No post ID returned from Postiz';\n    }\n    \n    results.platforms[platform].accounts[account].error = errorMessage;\n    results.errors.push({\n      platform: platform,\n      account: account,\n      error: errorMessage,\n      integrationId: response.integration,\n      details: response\n    });\n  }\n}\n\n// Set overall status\nif (results.failed > 0) {\n  results.executionSummary.overallStatus = results.successful > 0 ? 'partial' : 'failed';\n}\n\n// Try to get record ID from Airtable node\ntry {\n  const airtableData = $('üìä Content Database (Posts)1').first();\n  if (airtableData && airtableData.json.id) {\n    results.executionSummary.recordId = airtableData.json.id;\n  }\n} catch (e) {\n  console.log('Could not get record ID from Airtable node');\n}\n\nresults.executionSummary.platforms = Object.keys(results.platforms);\n\n// Add debug info\nresults.debug = {\n  itemCount: items.length,\n  sampleResponse: items[0]?.json || null,\n  integrationMappings: Object.keys(integrationToPlatform).length,\n  platformsProcessed: Object.keys(results.platforms)\n};\n\nreturn [{ json: results }];"
      },
      "typeVersion": 2
    },
    {
      "id": "d1d3833e-2209-4c11-84de-a35ba7f1775d",
      "name": "üñºÔ∏è Image Upload to Postiz2",
      "type": "n8n-nodes-base.httpRequest",
      "notes": "üîÑ Uploads image files to Postiz storage\n‚Ä¢ Endpoint: POST /upload\n‚Ä¢ Content-Type: multipart-form-data\n‚Ä¢ Input: Binary image data from Google Drive\n‚Ä¢ Output: Postiz file ID and path for posts\n‚Ä¢ Supports: JPG, PNG, GIF formats\nüì± Used across Instagram, Twitter, LinkedIn, Facebook",
      "position": [
        1880,
        520
      ],
      "parameters": {
        "url": "=https://postiz.yourdomain.com/api/public/v1/upload",
        "method": "POST",
        "options": {},
        "sendBody": true,
        "contentType": "multipart-form-data",
        "authentication": "genericCredentialType",
        "bodyParameters": {
          "parameters": [
            {
              "name": "file",
              "parameterType": "formBinaryData",
              "inputDataFieldName": "data"
            }
          ]
        },
        "genericAuthType": "httpHeaderAuth"
      },
      "credentials": {
        "httpHeaderAuth": {
          "id": "mEU0ecS6LOVkcowP",
          "name": "Postiz"
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "2786d270-9637-4773-9289-b4147bef6ba0",
      "name": "üíæ Save Image Path1",
      "type": "n8n-nodes-base.airtable",
      "notes": "üîÑ Updates Airtable with Postiz image path\n‚Ä¢ Operation: Update record\n‚Ä¢ Field: 'postiz image' = upload response path\n‚Ä¢ Used by all image-based social posts\n‚Ä¢ Maintains referential integrity\nüìä Enables tracking of media usage across platforms",
      "position": [
        2100,
        520
      ],
      "parameters": {
        "base": {
          "mode": "list",
          "value": "appTFomwpoQ8GVsSo"
        },
        "table": {
          "mode": "list",
          "value": "tblRnaXqxrvcQhqBw"
        },
        "columns": {
          "value": {
            "id": "={{ $('üìä Content Database (Media)').item.json.id }}",
            "postiz_twitter": "={{ $json.path }}"
          },
          "schema": [
            {
              "id": "id",
              "type": "string",
              "display": true,
              "readOnly": true,
              "required": false,
              "displayName": "id",
              "defaultMatch": true
            },
            {
              "id": "Name",
              "type": "string",
              "display": true,
              "removed": true,
              "readOnly": false,
              "required": false,
              "displayName": "Name",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "recordid",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": true,
              "required": false,
              "displayName": "recordid",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "google drive",
              "type": "string",
              "display": true,
              "removed": true,
              "readOnly": false,
              "required": false,
              "displayName": "google drive",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "transcript",
              "type": "string",
              "display": true,
              "removed": true,
              "readOnly": false,
              "required": false,
              "displayName": "transcript",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "initial script",
              "type": "string",
              "display": true,
              "removed": true,
              "readOnly": false,
              "required": false,
              "displayName": "initial script",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "start",
              "type": "boolean",
              "display": true,
              "removed": true,
              "readOnly": false,
              "required": false,
              "displayName": "start",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "upload media",
              "type": "boolean",
              "display": true,
              "removed": true,
              "readOnly": false,
              "required": false,
              "displayName": "upload media",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Post to socials",
              "type": "boolean",
              "display": true,
              "removed": true,
              "readOnly": false,
              "required": false,
              "displayName": "Post to socials",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Post shorts",
              "type": "boolean",
              "display": true,
              "removed": true,
              "readOnly": false,
              "required": false,
              "displayName": "Post shorts",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Short form Video",
              "type": "string",
              "display": true,
              "removed": true,
              "readOnly": false,
              "required": false,
              "displayName": "Short form Video",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Image for socials",
              "type": "string",
              "display": true,
              "removed": true,
              "readOnly": false,
              "required": false,
              "displayName": "Image for socials",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "postiz image",
              "type": "string",
              "display": true,
              "removed": true,
              "readOnly": false,
              "required": false,
              "displayName": "postiz image",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "postiz video",
              "type": "string",
              "display": true,
              "removed": true,
              "readOnly": false,
              "required": false,
              "displayName": "postiz video",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "twitter image",
              "type": "string",
              "display": true,
              "removed": true,
              "readOnly": false,
              "required": false,
              "displayName": "twitter image",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "postiz_twitter",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "postiz_twitter",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Record ID",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": true,
              "required": false,
              "displayName": "Record ID",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "youtube_title",
              "type": "string",
              "display": true,
              "removed": true,
              "readOnly": false,
              "required": false,
              "displayName": "youtube_title",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "youtube_description",
              "type": "string",
              "display": true,
              "removed": true,
              "readOnly": false,
              "required": false,
              "displayName": "youtube_description",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "youtube_thumbnail_text",
              "type": "string",
              "display": true,
              "removed": true,
              "readOnly": false,
              "required": false,
              "displayName": "youtube_thumbnail_text",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "twitter single",
              "type": "string",
              "display": true,
              "removed": true,
              "readOnly": false,
              "required": false,
              "displayName": "twitter single",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "twitter_thread",
              "type": "string",
              "display": true,
              "removed": true,
              "readOnly": false,
              "required": false,
              "displayName": "twitter_thread",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "linkedin_post",
              "type": "string",
              "display": true,
              "removed": true,
              "readOnly": false,
              "required": false,
              "displayName": "linkedin_post",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "facebook_post",
              "type": "string",
              "display": true,
              "removed": true,
              "readOnly": false,
              "required": false,
              "displayName": "facebook_post",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "facebook_story_caption",
              "type": "string",
              "display": true,
              "removed": true,
              "readOnly": false,
              "required": false,
              "displayName": "facebook_story_caption",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "instagram_post",
              "type": "string",
              "display": true,
              "removed": true,
              "readOnly": false,
              "required": false,
              "displayName": "instagram_post",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "instagram_reel",
              "type": "string",
              "display": true,
              "removed": true,
              "readOnly": false,
              "required": false,
              "displayName": "instagram_reel",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "tiktok_caption",
              "type": "string",
              "display": true,
              "removed": true,
              "readOnly": false,
              "required": false,
              "displayName": "tiktok_caption",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "youtube_shorts_caption",
              "type": "string",
              "display": true,
              "removed": true,
              "readOnly": false,
              "required": false,
              "displayName": "youtube_shorts_caption",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [
            "id"
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {},
        "operation": "update"
      },
      "typeVersion": 2.1
    },
    {
      "id": "0a4e8a7d-efef-4771-abdd-1e998072b38a",
      "name": "üì• Download x image from Drive",
      "type": "n8n-nodes-base.googleDrive",
      "notes": "‚òÅÔ∏è Downloads image from Google Drive\n‚Ä¢ Input: Google Drive file ID from Airtable\n‚Ä¢ Field: 'Image for socials'\n‚Ä¢ Output: Binary image data\n‚Ä¢ Used across all visual social platforms\nüì± Optimized for social media dimensions",
      "position": [
        1660,
        520
      ],
      "parameters": {
        "fileId": "{{FILEID_ID}}",
        "options": {},
        "operation": "download"
      },
      "typeVersion": 3
    },
    {
      "id": "1d285bf8-dc2a-4a35-b364-990bcbd718de",
      "name": "When clicking ‚ÄòExecute workflow‚Äô",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        880,
        440
      ],
      "parameters": {},
      "typeVersion": 1
    },
    {
      "id": "3a573341-05dd-45de-8db8-c3050877631b",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "position": [
        1100,
        440
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "5150e645-480f-428a-b261-32d53ba9c0b3",
              "name": "query.RecordId",
              "type": "string",
              "value": "recuoYjg4icStHsMK"
            }
          ]
        }
      },
      "typeVersion": 3.4
    }
  ],
  "active": false,
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "",
  "connections": {
    "Post": {
      "main": [
        [
          {
            "node": "üìä Content Database (Posts)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video": {
      "main": [
        [
          {
            "node": "üìä Content Database (Video)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "üìä Content Database (Media)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üéØ Upload": {
      "main": [
        [
          {
            "node": "üìä Content Database (Media)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîó integrations": {
      "main": [
        [
          {
            "node": "üîÄ Platform Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üê¶ X/Twitter Posts": {
      "main": [
        [
          {
            "node": "üìä Fixed Results Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîÄ Platform Router": {
      "main": [
        [
          {
            "node": "üßπ Instagram Content Cleaner",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üê¶ X/Twitter Posts",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üê¶ X/Twitter Alt Account",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üßπ LinkedIn Content Cleaner",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üßπ Facebook Content Cleaner",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíº LinkedIn Publisher": {
      "main": [
        [
          {
            "node": "üìä Fixed Results Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìò Facebook Publisher": {
      "main": [
        [
          {
            "node": "üìä Fixed Results Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üì∏ Instagram Publisher": {
      "main": [
        [
          {
            "node": "üìä Fixed Results Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üê¶ X/Twitter Alt Account": {
      "main": [
        [
          {
            "node": "üìä Fixed Results Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîÄ Video Platform Router": {
      "main": [
        [
          {
            "node": "üßπ Instagram Video Cleaner",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üßπ Facebook Video Cleaner",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üé¨ YouTube Publisher",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìπ Video Upload to Postiz": {
      "main": [
        [
          {
            "node": "üíæ Save Video Path",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üßπ Facebook Video Cleaner": {
      "main": [
        [
          {
            "node": "üìò Facebook Video Publisher",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîó integrations (Branch 2)": {
      "main": [
        [
          {
            "node": "üîÄ Video Platform Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üßπ Instagram Video Cleaner": {
      "main": [
        [
          {
            "node": "üìπ Instagram Video Publisher",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä Content Database (Media)": {
      "main": [
        [
          {
            "node": "üì• Download Video from Drive",
            "type": "main",
            "index": 0
          },
          {
            "node": "üì• Download Image from Drive",
            "type": "main",
            "index": 0
          },
          {
            "node": "üì• Download x image from Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä Content Database (Posts)": {
      "main": [
        [
          {
            "node": "üîç Content Validator & Cleaner1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä Content Database (Video)": {
      "main": [
        [
          {
            "node": "üîó integrations (Branch 2)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üßπ Facebook Content Cleaner": {
      "main": [
        [
          {
            "node": "üìò Facebook Publisher",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üßπ LinkedIn Content Cleaner": {
      "main": [
        [
          {
            "node": "üíº LinkedIn Publisher",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üì• Download Image from Drive": {
      "main": [
        [
          {
            "node": "üñºÔ∏è Image Upload to Postiz",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üì• Download Video from Drive": {
      "main": [
        [
          {
            "node": "üìπ Video Upload to Postiz",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üñºÔ∏è Image Upload to Postiz": {
      "main": [
        [
          {
            "node": "üíæ Save Image Path",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üßπ Instagram Content Cleaner": {
      "main": [
        [
          {
            "node": "üì∏ Instagram Publisher",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üñºÔ∏è Image Upload to Postiz2": {
      "main": [
        [
          {
            "node": "üíæ Save Image Path1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Content Availability Check1": {
      "main": [
        [
          {
            "node": "üîó integrations",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "‚ùå Content Error1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üì• Download x image from Drive": {
      "main": [
        [
          {
            "node": "üñºÔ∏è Image Upload to Postiz2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Content Validator & Cleaner1": {
      "main": [
        [
          {
            "node": "üìã Content Availability Check1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‚ÄòExecute workflow‚Äô": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}
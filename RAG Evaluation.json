{
  "name": "RAG Evaluation",
  "nodes": [
    {
      "parameters": {
        "model": "google/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        464,
        144
      ],
      "id": "59c4f588-31ca-49cd-8e99-708ab63d17a3",
      "name": "OpenRouter Chat Model1",
      "credentials": {
        "openRouterApi": {
          "id": "td3utRybtI5wRRtH",
          "name": "OpenRouter account 2"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Subject: {{ $json.subject }}\n\nBody: {{ $json.text }}",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        592,
        -48
      ],
      "id": "c6c16fa1-9b65-4700-b95d-d8f9e36a9a39",
      "name": "Support Agent"
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "Use this tool to get policy and FAQ information.",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [
        592,
        144
      ],
      "id": "b703bfa4-5d8e-46b8-a1c9-b95262adfc3d",
      "name": "Supabase Vector Store",
      "credentials": {
        "supabaseApi": {
          "id": "ujFIrt3vyGsie6vW",
          "name": "7/11/25"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        640,
        304
      ],
      "id": "50a9fd6b-8836-4daf-90ad-1c7db7d6eff7",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "Og8bUooZBDz5NVwj",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"subject\": {\n      \"type\": \"string\",\n      \"description\": \"the email subject\"\n    },\n    \"emailBody\": {\n      \"type\": \"string\",\n      \"description\": \"the email body\"\n    }\n  },\n  \"required\": [\"subject\", \"emailBody\"]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        912,
        144
      ],
      "id": "dda355ba-fc99-4f30-823a-cd2047e22545",
      "name": "Subject & Email"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1zf9jK8OdSrV4qMLwBjqrfML2tPx2SJmdqmxa4QN5TXU",
          "mode": "list",
          "cachedResultName": "RAG Evaluation",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1zf9jK8OdSrV4qMLwBjqrfML2tPx2SJmdqmxa4QN5TXU/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1zf9jK8OdSrV4qMLwBjqrfML2tPx2SJmdqmxa4QN5TXU/edit#gid=0"
        },
        "outputs": {
          "values": [
            {
              "outputName": "Actual Answer",
              "outputValue": "={{ $json.output.emailBody }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.evaluation",
      "typeVersion": 4.7,
      "position": [
        1184,
        -176
      ],
      "id": "68bbdb4e-f5ee-46d8-965c-012c059fc9b0",
      "name": "Set Output",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "s7PIUa59FFmDLn1e",
          "name": "Demo 4/2"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "={{ $('Gmail Trigger').item.json.to.value[0].address }}",
        "subject": "={{ $json.output.subject }}",
        "emailType": "text",
        "message": "={{ $json.output.emailBody }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1184,
        64
      ],
      "id": "4a850a85-684f-41f6-943b-124ddd1ed386",
      "name": "Send a message",
      "webhookId": "0816041e-e10f-48f4-84a7-fc535592cee7",
      "credentials": {
        "gmailOAuth2": {
          "id": "BiJjTJU9rGn6Wr6o",
          "name": "TrueHorizon"
        }
      }
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "simple": false,
        "filters": {},
        "options": {}
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.2,
      "position": [
        368,
        -208
      ],
      "id": "67e4c380-679a-485f-8bd2-99e86a8a21e6",
      "name": "Gmail Trigger",
      "credentials": {
        "gmailOAuth2": {
          "id": "KY7391f1ZHRL52Nu",
          "name": "Demo 4/2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2bff1605-23ba-42c4-bb58-6762420fe256",
              "name": "subject",
              "value": "={{ $json.Subject }}",
              "type": "string"
            },
            {
              "id": "96fc28f4-50b5-406a-b0c3-c4e3ce2ebae9",
              "name": "text",
              "value": "={{ $json.Body }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        400,
        -48
      ],
      "id": "d25b775b-479a-41c3-8576-bd18c0f9bc22",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "operation": "checkIfEvaluating"
      },
      "type": "n8n-nodes-base.evaluation",
      "typeVersion": 4.7,
      "position": [
        976,
        -48
      ],
      "id": "75c1b25d-0a56-41e5-820d-67473ae0f324",
      "name": "Evaluation"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1zf9jK8OdSrV4qMLwBjqrfML2tPx2SJmdqmxa4QN5TXU",
          "mode": "list",
          "cachedResultName": "RAG Evaluation",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1zf9jK8OdSrV4qMLwBjqrfML2tPx2SJmdqmxa4QN5TXU/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1zf9jK8OdSrV4qMLwBjqrfML2tPx2SJmdqmxa4QN5TXU/edit#gid=0"
        }
      },
      "type": "n8n-nodes-base.evaluationTrigger",
      "typeVersion": 4.6,
      "position": [
        256,
        -48
      ],
      "id": "efe287e5-46fc-42d7-8204-284331088501",
      "name": "When fetching a dataset row",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "s7PIUa59FFmDLn1e",
          "name": "Demo 4/2"
        }
      }
    },
    {
      "parameters": {
        "model": "openai/gpt-4.1",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1376,
        -48
      ],
      "id": "e8fefe7a-d85f-4af4-98ac-d99b7c0ffc58",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "td3utRybtI5wRRtH",
          "name": "OpenRouter account 2"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Expected Answer: {{ $('When fetching a dataset row').item.json['Expected Answer'] }}\n\nActual Answer: {{ $('Support Agent').item.json.output.emailBody }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are an expert factual evaluator assessing the accuracy of answers compared to established ground truths.\n\nEvaluate the factual correctness of a given output compared to the provided ground truth on a scale from 1 to 5. Use detailed reasoning to thoroughly analyze all claims before determining the final score.\n\n# Scoring Criteria\n\n- 5: Highly similar - The output and ground truth are nearly identical, with only minor, insignificant differences.\n- 4: Somewhat similar - The output is largely similar to the ground truth but has few noticeable differences.\n- 3: Moderately similar - There are some evident differences, but the core essence is captured in the output.\n- 2: Slightly similar - The output only captures a few elements of the ground truth and contains several differences.\n- 1: Not similar - The output is significantly different from the ground truth, with few or no matching elements.\n\n# Evaluation Steps\n\n1. Identify and list the key elements present in both the output and the ground truth.\n2. Compare these key elements to evaluate their similarities and differences, considering both content and structure.\n3. Analyze the semantic meaning conveyed by both the output and the ground truth, noting any significant deviations.\n4. Consider factual accuracy of specific details, including names, dates, numbers, and relationships.\n5. Assess whether the output maintains the factual integrity of the ground truth, even if phrased differently.\n6. Determine the overall level of similarity and accuracy according to the defined criteria.\n\n# Output Format\n\nProvide:\n- A detailed analysis of the comparison (extended reasoning)\n- A one-sentence summary highlighting key differences (not similarities)\n- The final similarity score as an integer (1, 2, 3, 4, or 5)\n\nAlways follow the JSON format below and return nothing else:\n{\n  \"extended_reasoning\": \"<detailed step-by-step analysis of factual accuracy and similarity>\",\n  \"reasoning_summary\": \"<one sentence summary focusing on key differences>\",\n  \"score\": <number: integer from 1 to 5>\n}\n\n# Examples\n\n**Example 1:**\n\nInput:\n- Output: \"The cat sat on the mat.\"\n- Ground Truth: \"The feline is sitting on the rug.\"\n\nExpected Output:\n{\n  \"extended_reasoning\": \"I need to compare 'The cat sat on the mat' with 'The feline is sitting on the rug.' First, let me identify the key elements: both describe an animal ('cat' vs 'feline') in a position ('sat' vs 'sitting') on a surface ('mat' vs 'rug'). The subject is semantically identical - 'cat' and 'feline' refer to the same animal. The action is also semantically equivalent - 'sat' and 'sitting' both describe the same position, though one is past tense and one is present continuous. The location differs in specific wording ('mat' vs 'rug') but both refer to floor coverings that serve the same function. The basic structure and meaning of both sentences are preserved, though they use different vocabulary and slightly different tense. The core information being conveyed is the same, but there are noticeable wording differences.\",\n  \"reasoning_summary\": \"The sentences differ in vocabulary choice ('cat' vs 'feline', 'mat' vs 'rug') and verb tense ('sat' vs 'is sitting').\",\n  \"score\": 3\n}\n\n**Example 2:**\n\nInput:\n- Output: \"The quick brown fox jumps over the lazy dog.\"\n- Ground Truth: \"A fast brown animal leaps over a sleeping canine.\"\n\nExpected Output:\n{\n  \"extended_reasoning\": \"I need to compare 'The quick brown fox jumps over the lazy dog' with 'A fast brown animal leaps over a sleeping canine.' Starting with the subjects: 'quick brown fox' vs 'fast brown animal'. Both describe the same entity (a fox is a type of animal) with the same attributes (quick/fast and brown). The action is described as 'jumps' vs 'leaps', which are synonymous verbs describing the same motion. The object in both sentences is a dog, described as 'lazy' in one and 'sleeping' in the other, which are related concepts (a sleeping dog could be perceived as lazy). The structure follows the same pattern: subject + action + over + object. The sentences convey the same scene with slightly different word choices that maintain the core meaning. The level of specificity differs slightly ('fox' vs 'animal', 'dog' vs 'canine'), but the underlying information and imagery remain very similar.\",\n  \"reasoning_summary\": \"The sentences use different but synonymous terminology ('quick' vs 'fast', 'jumps' vs 'leaps', 'lazy' vs 'sleeping') and varying levels of specificity ('fox' vs 'animal', 'dog' vs 'canine').\",\n  \"score\": 4\n}\n\n# Notes\n\n- Focus primarily on factual accuracy and semantic similarity, not writing style or phrasing differences.\n- Identify specific differences rather than making general assessments.\n- Pay special attention to dates, numbers, names, locations, and causal relationships when present.\n- Consider the significance of each difference in the context of the overall information.\n- Be consistent in your scoring approach across different evaluations."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        1392,
        -176
      ],
      "id": "5c67ec2b-4c83-4441-934d-6136047b6228",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"extendedReasoning\": {\n      \"type\": \"string\",\n      \"description\": \"Full, detailed chain-of-thought reasoning.\"\n    },\n    \"reasoningSummary\": {\n      \"type\": \"string\",\n      \"description\": \"A concise summary of the reasoning.\"\n    },\n    \"score\": {\n      \"type\": \"number\",\n      \"description\": \"Numeric score reflecting confidence or quality (e.g. 0–100).\"\n    }\n  },\n  \"required\": [\"extendedReasoning\", \"reasoningSummary\", \"score\"]\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1600,
        -48
      ],
      "id": "ea4fabf2-a35f-4586-8d64-f6f7b95e084a",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "operation": "setMetrics",
        "metric": "customMetrics",
        "metrics": {
          "assignments": [
            {
              "name": "Accuracy",
              "value": "={{ $json.output.score }}",
              "type": "number",
              "id": "89160e24-b3f9-4bb7-80b4-48575b983260"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.evaluation",
      "typeVersion": 4.7,
      "position": [
        1744,
        -176
      ],
      "id": "7abc9ff8-0a02-491b-80d2-6deea0d87e1a",
      "name": "Score"
    },
    {
      "parameters": {
        "operation": "setMetrics",
        "options": {}
      },
      "type": "n8n-nodes-base.evaluation",
      "typeVersion": 4.7,
      "position": [
        1392,
        -448
      ],
      "id": "346677c1-3fe6-45cf-a73e-5f14769666ed",
      "name": "Evaluation1",
      "disabled": true
    },
    {
      "parameters": {
        "content": "You can use this node instead of the AI Agent. When I filmed the video, this node was bugging. Go to 13:06 in the YouTube video to see what I mean.",
        "height": 240,
        "width": 416
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1312,
        -544
      ],
      "id": "b2325e18-6306-44c6-8faa-a0e03de45754",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "# 🛠️ Setup Guide  \n**Author:** [Nate Herk](https://www.youtube.com/@nateherk)\n\nFollow these steps to configure your RAG evaluation workflow:\n\n### ✅ Step 1: Connect the Google Sheet  \nMake a copy of [**this Google Sheet**](https://docs.google.com/spreadsheets/u/2/d/1zf9jK8OdSrV4qMLwBjqrfML2tPx2SJmdqmxa4QN5TXU/copy) and link it to the **evaluation nodes**.\n\n### ✅ Step 2: Connect Supabase  \nAdd your **Supabase vector database credentials** to n8n. This enables the workflow to store and query embeddings for your documents.\n\n### ✅ Step 3: Ingest the Google Doc  \nCopy [**this Google Doc**](https://docs.google.com/document/u/2/d/138vBl8GkN6WQF4Ewi6b54LGlRDTxwyKcNf8Q9iNz-jg/copy) and ingest its contents into your Supabase vector store.  \n💡 *Need help with this?* [Watch this full tutorial on YouTube](https://youtu.be/cCD303XsUjI?si=ju83TQuVHfMYiptN)\n\n### ✅ Step 4: Connect a Chat Model  \nUse your [OpenRouter](https://openrouter.ai/) API key (or another LLM provider) to power **answer generation** and **AI-based evaluation**.\n\n### ✅ Step 5: Run the Evaluation  \nStart the workflow to generate answers and view the **correctness scores** in your Google Sheet 📈.  \nTweak the **models** or **system prompts** and re-run the evaluation to see how your changes affect the scores.\n",
        "height": 672,
        "width": 640
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -464,
        -240
      ],
      "id": "2659fba9-e605-42e8-921a-1c7306e25431",
      "name": "Sticky Note1"
    }
  ],
  "pinData": {},
  "connections": {
    "OpenRouter Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Support Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "ai_tool": [
        [
          {
            "node": "Support Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Subject & Email": {
      "ai_outputParser": [
        [
          {
            "node": "Support Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Support Agent": {
      "main": [
        [
          {
            "node": "Evaluation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "Support Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Support Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Evaluation": {
      "main": [
        [
          {
            "node": "Set Output",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When fetching a dataset row": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Output": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "c36ee2b1-fb76-406d-8cdd-5a4938b4dd8a",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "95e5a8c2e51c83e33b232ea792bbe3f063c094c33d9806a5565cb31759e1ad39"
  },
  "id": "lRPqDGFTWlbAx2B3",
  "tags": []
}
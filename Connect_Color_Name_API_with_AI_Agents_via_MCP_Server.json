{
  "id": "mv1y6rH9rcvO6FgN",
  "meta": null,
  "name": "Color Name API MCP Server",
  "tags": [],
  "nodes": [
    {
      "id": "ba19ce5e-4a48-4b7b-bb32-2b7a0196fd55",
      "name": "Workflow Overview",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1540,
        -140
      ],
      "parameters": {
        "width": 580,
        "height": 1280,
        "content": "## üõ†Ô∏è Color Name API MCP Server ‚úÖ 4 operations\n\n### About\nAn API that provides names for colors based on their hex value\n\n### üîß How it Works\n\nThis workflow converts the Color Name API API into an MCP-compatible interface for AI agents.\n\n‚Ä¢ **MCP Trigger**: Serves as your server endpoint for AI agent requests\n‚Ä¢ **HTTP Request Nodes**: Handle API calls to https://api.color.pizza/v1/\n‚Ä¢ **AI Expressions**: Automatically populate parameters via `$fromAI()` placeholders\n‚Ä¢ **Native Integration**: Returns responses directly to the AI agent\n\n### üìã Available Operations (4 endpoints)\n\n** (1 operations)**\nget\n\n**Lists (1 operations)**\nget\n\n**Names (1 operations)**\nget\n\n**Swatch (1 operations)**\ngenerate\n\n### ‚öôÔ∏è Setup Instructions\n\n1. **Import Workflow**: Load this workflow into your n8n instance\n\n2. **Authentication**: No authentication required\n\n3. **Activate Workflow**: Enable the workflow to start the MCP server\n\n4. **Get MCP URL**: Copy the webhook URL from the MCP trigger\n\n5. **Connect AI Agent**: Use the MCP URL in your AI agent configuration\n\n### üí° Usage Notes\n\n‚Ä¢ Parameters are auto-populated by AI using $fromAI() expressions\n‚Ä¢ With 4 API endpoints available as tools\n‚Ä¢ Responses maintain original API structure\n### üõ†Ô∏è Customization\n\n‚Ä¢ Add data transformation nodes if needed\n‚Ä¢ Implement custom error handling\n‚Ä¢ Add logging or monitoring nodes\n\n‚Ä¢ Modify parameter defaults in any HTTP request node as needed\n\n### üí¨ Need Help?\nCheck the [n8n documentation](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.toolmcp/) or ping me on [discord](https://discord.me/cfomodz) for MCP integration guidance or customizations."
      },
      "typeVersion": 1
    },
    {
      "id": "4f171b0e-b19a-48d1-9811-02b96abb489e",
      "name": "Color Name API MCP Server",
      "type": "@n8n/n8n-nodes-langchain.mcpTrigger",
      "position": [
        -580,
        -140
      ],
      "webhookId": "e63ee384-4bbe-4099-8176-c204c993f82a",
      "parameters": {
        "path": "color-name-api-mcp"
      },
      "typeVersion": 1
    },
    {
      "id": "18e7cb1e-ac5c-4dc8-8477-08e3fa70ba9d",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -900,
        100
      ],
      "parameters": {
        "color": 2,
        "width": 300,
        "height": 180,
        "content": "## "
      },
      "typeVersion": 1
    },
    {
      "id": "376f8798-4071-4285-846f-7301c756b900",
      "name": "Get all colors of the default color name list",
      "type": "n8n-nodes-base.httpRequestTool",
      "position": [
        -780,
        120
      ],
      "parameters": {
        "url": "=https://api.color.pizza/v1//",
        "options": {},
        "sendQuery": true,
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "queryParameters": {
          "parameters": [
            {
              "name": "list",
              "value": "={{ $fromAI('list', 'The name of the color name list to use', 'string') }}"
            },
            {
              "name": "values",
              "value": "={{ $fromAI('values', 'The hex values of the colors to retrieve without '#'', 'string') }}"
            },
            {
              "name": "noduplicates",
              "value": "={{ $fromAI('noduplicates', 'Allow duplicate names or not', 'boolean') }}"
            }
          ]
        },
        "toolDescription": "Get all colors of the default color name list\n\nParameters:\n- Query parameters:\n  ‚Ä¢ list (optional) - The name of the color name list to use\n  ‚Ä¢ values (optional) - The hex values of the colors to retrieve without '#'\n  ‚Ä¢ noduplicates (optional) - Allow duplicate names or not"
      },
      "typeVersion": 4.2
    },
    {
      "id": "2d0765fc-10bf-4b29-84aa-3c595241591d",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -900,
        400
      ],
      "parameters": {
        "color": 3,
        "width": 300,
        "height": 180,
        "content": "## Lists"
      },
      "typeVersion": 1
    },
    {
      "id": "8226c2ae-b9b1-4d56-bf68-3dd3224d1c35",
      "name": "Get all colors of the default color name list 1",
      "type": "n8n-nodes-base.httpRequestTool",
      "position": [
        -780,
        420
      ],
      "parameters": {
        "url": "=https://api.color.pizza/v1//lists/",
        "options": {},
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "toolDescription": "Get all colors of the default color name list"
      },
      "typeVersion": 4.2
    },
    {
      "id": "d3c92726-4bba-416b-abc7-1ab33b57a999",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -900,
        680
      ],
      "parameters": {
        "color": 4,
        "width": 300,
        "height": 180,
        "content": "## Names"
      },
      "typeVersion": 1
    },
    {
      "id": "c0194bb8-670b-4828-886d-a5d30b3fb3ea",
      "name": "Get all colors of the default color name list 2",
      "type": "n8n-nodes-base.httpRequestTool",
      "position": [
        -780,
        700
      ],
      "parameters": {
        "url": "=https://api.color.pizza/v1//names/",
        "options": {},
        "sendQuery": true,
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "queryParameters": {
          "parameters": [
            {
              "name": "name",
              "value": "={{ $fromAI('name', 'The name of the color to retrieve (min 3 characters)', 'string') }}"
            },
            {
              "name": "list",
              "value": "={{ $fromAI('list', 'The name of the color name list to use', 'string') }}"
            }
          ]
        },
        "toolDescription": "Get all colors of the default color name list\n\nParameters:\n- Query parameters:\n  ‚Ä¢ name (required) - The name of the color to retrieve (min 3 characters)\n  ‚Ä¢ list (optional) - The name of the color name list to use"
      },
      "typeVersion": 4.2
    },
    {
      "id": "7539ee10-f262-4b1e-97d9-8ed457f4b468",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -900,
        960
      ],
      "parameters": {
        "color": 5,
        "width": 300,
        "height": 180,
        "content": "## Swatch"
      },
      "typeVersion": 1
    },
    {
      "id": "c18a6447-4697-40c4-a5ff-b33da2c78ed0",
      "name": "Generate a color swatch for any color",
      "type": "n8n-nodes-base.httpRequestTool",
      "position": [
        -780,
        980
      ],
      "parameters": {
        "url": "=https://api.color.pizza/v1//swatch/",
        "options": {},
        "sendQuery": true,
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "queryParameters": {
          "parameters": [
            {
              "name": "color",
              "value": "={{ $fromAI('color', 'The hex value of the color to retrieve without '#'', 'string') }}"
            },
            {
              "name": "name",
              "value": "={{ $fromAI('name', 'The name of the color', 'string') }}"
            }
          ]
        },
        "toolDescription": "Generate a color swatch for any color\n\nParameters:\n- Query parameters:\n  ‚Ä¢ color (required) - The hex value of the color to retrieve without '#'\n  ‚Ä¢ name (optional) - The name of the color"
      },
      "typeVersion": 4.2
    }
  ],
  "active": false,
  "shared": [
    {
      "role": "workflow:owner",
      "project": {
        "id": "G5fce9xGuBAsWBXe",
        "icon": null,
        "name": "David Ashby <david.ashby.lds@gmail.com>",
        "type": "personal",
        "createdAt": "2025-06-04T02:55:02.013Z",
        "updatedAt": "2025-06-04T02:56:01.361Z",
        "projectRelations": [
          {
            "role": "project:personalOwner",
            "user": {
              "id": "715c1c00-cb48-4712-9a32-f1f4b6db2b30",
              "role": "global:owner",
              "email": "david.ashby.lds@gmail.com",
              "disabled": false,
              "lastName": "Ashby",
              "settings": {
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1749357655581
                },
                "userActivated": true,
                "userActivatedAt": 1749075994495,
                "easyAIWorkflowOnboarded": true,
                "firstSuccessfulWorkflowId": "3N3vVikZb3MckFYm"
              },
              "createdAt": "2025-06-04T02:55:01.745Z",
              "firstName": "David",
              "isPending": false,
              "updatedAt": "2025-06-08T04:40:58.399Z",
              "mfaEnabled": false,
              "personalizationAnswers": {
                "version": "v4",
                "personalization_survey_n8n_version": "1.95.3",
                "personalization_survey_submitted_at": "2025-06-04T02:56:07.075Z"
              }
            },
            "userId": "715c1c00-cb48-4712-9a32-f1f4b6db2b30",
            "createdAt": "2025-06-04T02:55:02.013Z",
            "projectId": "G5fce9xGuBAsWBXe",
            "updatedAt": "2025-06-04T02:55:02.013Z"
          }
        ]
      },
      "createdAt": "2025-06-30T17:16:52.053Z",
      "projectId": "G5fce9xGuBAsWBXe",
      "updatedAt": "2025-06-30T17:16:52.053Z",
      "workflowId": "mv1y6rH9rcvO6FgN"
    }
  ],
  "pinData": {},
  "settings": {
    "timezone": "America/New_York"
  },
  "createdAt": "2025-06-30T17:16:52.051Z",
  "updatedAt": "2025-06-30T17:20:16.000Z",
  "versionId": "fa8f1f8d-2ceb-49e1-8ed0-8f7b0441b35a",
  "isArchived": false,
  "staticData": null,
  "connections": {
    "Generate a color swatch for any color": {
      "ai_tool": [
        [
          {
            "node": "Color Name API MCP Server",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get all colors of the default color name list": {
      "ai_tool": [
        [
          {
            "node": "Color Name API MCP Server",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get all colors of the default color name list 1": {
      "ai_tool": [
        [
          {
            "node": "Color Name API MCP Server",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get all colors of the default color name list 2": {
      "ai_tool": [
        [
          {
            "node": "Color Name API MCP Server",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "triggerCount": 0
}
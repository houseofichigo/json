{
  "id": "rPicfavvntizpQkM",
  "meta": {
    "instanceId": "1c7b08fed4406d546caf4a44e8b942ca317e7e207bb9a5701955a1a6e1ce1843",
    "templateCredsSetupCompleted": true
  },
  "name": "Legal Assistant Agent",
  "tags": [],
  "nodes": [
    {
      "id": "81b14e7a-0dde-4dd3-aa1b-943c1857903d",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        220,
        0
      ],
      "parameters": {
        "text": "={{ $json.message.text }}",
        "options": {
          "systemMessage": "You are a helpful legal assistant. Your task is to answer legal questions of the users by referring to the Pinecone Vector Database \"Legal Contract Library\" to get an accurate answer. \n#Rule\nDo not make up facts, if you do not have the right information, you may say so."
        },
        "promptType": "define"
      },
      "typeVersion": 2
    },
    {
      "id": "53d344e5-773b-432a-8940-00a9b6814ee8",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        80,
        240
      ],
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "credentials": {
        "openAiApi": {}
      },
      "typeVersion": 1.2
    },
    {
      "id": "38b9de84-bfee-4d66-b22a-f95bcd78b9a6",
      "name": "Embeddings OpenAI",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "position": [
        520,
        360
      ],
      "parameters": {
        "options": {}
      },
      "credentials": {
        "openAiApi": {}
      },
      "typeVersion": 1.2
    },
    {
      "id": "be801891-2ac9-4871-b54b-72491eb9b962",
      "name": "Legal Contract Library",
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "position": [
        360,
        240
      ],
      "parameters": {
        "mode": "retrieve-as-tool",
        "options": {},
        "toolName": "Redacted",
        "pineconeIndex": {
          "__rl": true,
          "mode": "id",
          "value": "Redacted"
        },
        "toolDescription": "Extract, contracts, legal policies and relevant regulatory documents here."
      },
      "credentials": {
        "pineconeApi": {}
      },
      "typeVersion": 1.1
    },
    {
      "id": "8cbbb27e-5c31-4c8e-93a1-7515b28649b6",
      "name": "Telegram",
      "type": "n8n-nodes-base.telegram",
      "position": [
        820,
        0
      ],
      "webhookId": "",
      "parameters": {
        "text": "={{ $json.output }}",
        "chatId": "",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "credentials": {
        "telegramApi": {}
      },
      "typeVersion": 1.2
    },
    {
      "id": "c664b9b0-cf1b-454c-b943-adcc3f0a8de5",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "position": [
        -200,
        0
      ],
      "webhookId": "",
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "credentials": {
        "telegramApi": {}
      },
      "typeVersion": 1.2
    },
    {
      "id": "f4fa00fd-5e18-4a81-8263-b3bf2d52cb9e",
      "name": "Simple Memory1",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        240,
        240
      ],
      "parameters": {
        "sessionKey": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "sessionIdType": "customKey",
        "contextWindowLength": 10
      },
      "typeVersion": 1.3
    },
    {
      "id": "f2aff94c-ad46-4759-90f0-368d420219e2",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -340,
        -160
      ],
      "parameters": {
        "width": 340,
        "height": 700,
        "content": "Telegram Message Trigger"
      },
      "typeVersion": 1
    },
    {
      "id": "4eb385e9-5caf-46f3-97a3-bac95c210c78",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        20,
        -160
      ],
      "parameters": {
        "color": 3,
        "width": 720,
        "height": 700,
        "content": "Legal Asssistant AI Agent"
      },
      "typeVersion": 1
    },
    {
      "id": "252a59c6-90aa-4ca4-9a4e-2905b69cc984",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        760,
        -160
      ],
      "parameters": {
        "color": 4,
        "width": 280,
        "height": 700,
        "content": "Telegram Output"
      },
      "typeVersion": 1
    },
    {
      "id": "beaef1c7-48cb-4f35-a0d7-b5819a0e99fe",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1180,
        -160
      ],
      "parameters": {
        "color": 6,
        "width": 820,
        "height": 1180,
        "content": "üßë‚Äç‚öñÔ∏è Legal Assistant Agent ‚Äî AI-Powered Legal Q&A with Document Retrieval\nCategory: LegalTech / AI Agent / RAG / Chatbot\n\nDescription:\nThis no-code AI agent acts as a legal assistant chatbot that can answer user queries by retrieving information from a pre-indexed legal document library. It‚Äôs powered by OpenAI + Pinecone + Telegram and designed for law firms, compliance teams, or anyone who needs instant answers from contracts, policies, or regulatory documents.\n\nFor more of such builds and step-by-step video tutorial, check out:\nhttps://www.youtube.com/@Automatewithmarc\n\nüîç How it Works:\n\nTelegram Trigger ‚Äì Starts when a user sends a message via Telegram.\n\nAI Agent (GPT-4o) ‚Äì Uses a retrieval-augmented generation (RAG) setup to understand the question and pull relevant context.\n\nPinecone Vector Store ‚Äì Searches across a vectorized legal contract library for relevant clauses or documents.\n\nOpenAI Embeddings ‚Äì Converts uploaded documents into vector embeddings for efficient search.\n\nMemory Buffer ‚Äì Maintains conversation flow and context for follow-up questions.\n\nTelegram Response ‚Äì Sends the final AI-generated answer directly to the user.\n\nüéØ Use Cases:\n\nIn-house legal teams automating internal policy Q&A\n\nLaw firms building client-facing legal bots\n\nStartups offering legal tech services with document-based queries\n\nCompliance teams monitoring contract terms and obligations\n\n‚úÖ Key Features:\n\nReal-time legal Q&A via Telegram\n\nPinecone + OpenAI-powered vector search\n\nRetrieval-Augmented Generation (RAG) setup\n\nFactual, memory-aware assistant with fallback if info is unavailable\n\nFully customizable and extendable\n\n‚öôÔ∏è Setup Instructions:\n\nConnect OpenAI, Pinecone, and Telegram credentials\n\nUpload your contracts or policy docs into Pinecone\n\nCustomize the system prompt or expand document sources as needed\n\nActivate and test via Telegram\n\nThis workflow is a solid foundation for any AI-powered legal assistant or chatbot solution‚Äîhighly relevant for modern LegalOps and knowledge management teams."
      },
      "typeVersion": 1
    }
  ],
  "active": false,
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "0cec767c-2903-4bfb-999a-5668fcadd39d",
  "connections": {
    "AI Agent": {
      "main": [
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Legal Contract Library",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Legal Contract Library": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  }
}
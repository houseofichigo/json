{
  "name": "redacted-cs-agent",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "d23a220e-ec4f-4fac-8824-786723ec6081",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -200,
        200
      ],
      "id": "e93e1b49-352b-43a4-af91-2cc5e7c9f3c9",
      "name": "Webhook",
      "webhookId": "d23a220e-ec4f-4fac-8824-786723ec6081"
    },
    {
      "parameters": {
        "jsCode": "const subject = $('HTTP Request3').first().json.ticket.subject;\nconst comments = $input.first().json.comments;\nconst supportStaffId = staffID;\n\n// Filter out internal notes (public: false)\nconst publicComments = comments.filter(comment => comment.public);\n\n// Check if first public comment matches the description (skip if so)\nconst firstPublicComment = publicComments[0];\nconst description = $('HTTP Request3').first().json.ticket.description;\nconst isDuplicate = firstPublicComment && firstPublicComment.plain_body?.trim() === description.trim();\n\n// Build conversation\nconst conversation = [];\n\nfor (let i = 0; i < publicComments.length; i++) {\n  const comment = publicComments[i];\n  \n  // Skip first comment if it's a duplicate of the description\n  if (i === 0 && isDuplicate) continue;\n\n  const role = comment.author_id === supportStaffId ? 'Support Staff' : 'Customer';\n  conversation.push({\n    role,\n    message: comment.plain_body?.trim()\n  });\n}\n\nreturn [\n  {\n    json: {\n      subject,\n      conversation\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        200
      ],
      "id": "f659b0e5-b88a-48a4-8b96-0abe72ef9333",
      "name": "Process Entire Ticket"
    },
    {
      "parameters": {
        "url": "=https://domain.zendesk.com/api/v2/tickets/{{ $('Webhook').item.json.body.ticket_id }}/comments",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "zendeskApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        240,
        200
      ],
      "id": "8ac9b421-8331-431f-9d78-c11aaf90aa2f",
      "name": "HTTP Request2",
      "credentials": {
        "zendeskApi": {
          "id": "Ly81EFI9CTnSXgH4",
          "name": "Zendesk SL-2"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://domain.zendesk.com/api/v2/tickets/{{ $json.body.ticket_id }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "zendeskApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        20,
        200
      ],
      "id": "caad94b1-6547-43cb-816a-7d807f3addf9",
      "name": "HTTP Request3",
      "credentials": {
        "zendeskApi": {
          "id": "Ly81EFI9CTnSXgH4",
          "name": "Zendesk SL-2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const data = $input.item.json;\n\nconst subject = data.subject;\nconst conversation = data.conversation;\n\nlet ticketInfo = `## Subject: ${subject}\\n\\n`;\n\nfor (const item of conversation) {\n  ticketInfo += `**${item.role}:**\\n${item.message}\\n\\n---\\n\\n`;\n}\n\nreturn [\n  {\n    json: {\n      ticketInfo\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        200
      ],
      "id": "95b59d53-20bb-4be0-bf8d-020ffbea32bc",
      "name": "Flatten"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('HTTP Request3').item.json.ticket.status }}",
                    "rightValue": "open",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "61b5f100-291e-498b-b6d4-501f3d09f66f"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Open Ticket"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "7aa16296-0c6d-476e-a00a-8364b0df0ded",
                    "leftValue": "={{ $('HTTP Request3').item.json.ticket.status }}",
                    "rightValue": "solved",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Solved Ticket"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        900,
        200
      ],
      "id": "a7adb076-dd53-4c15-b39e-d1c0e6adaef1",
      "name": "Switch"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1160,
        120
      ],
      "id": "c4582aa3-3b9f-4e0e-bcbb-2ec8fbcb431c",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "fXxOogeNOLeX5qEJ",
          "name": "openai-bart-demo"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Use this tool to find answers to questions",
        "method": "POST",
        "url": "https://api.perplexity.ai/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "[REDACTED]",
              "value": "[REDACTED]"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('JSON', `{\n  \"model\": \"sonar\",\n  \"search_domain_filter\": [joolca.com],\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"Be precise and concise.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"{question_to_ask}\"\n    }\n  ]\n}`, 'json') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1400,
        120
      ],
      "id": "90721814-2e5e-4990-92ef-7da4bf093879",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://domain.zendesk.com/api/v2/tickets/{{ $('Webhook').item.json.body.ticket_id }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "zendeskApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1780,
        -100
      ],
      "id": "4156b5ff-ab6e-476a-8b58-f7fa14aed582",
      "name": "HTTP Request1",
      "credentials": {
        "zendeskApi": {
          "id": "Ly81EFI9CTnSXgH4",
          "name": "Zendesk SL-2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the stringified JSON from the input\nconst rawOutput = items[0].json.output;\n\n// Parse the string into a plain JavaScript object\nconst parsed = JSON.parse(rawOutput);\n\n// Ensure it's a plain object, not wrapped in extra keys or arrays\nif (typeof parsed !== 'object' || Array.isArray(parsed)) {\n  throw new Error('Parsed JSON must be a plain object');\n}\n\n// Return the parsed object so it can be used as-is in an HTTP Request\nreturn [\n  {\n    json: parsed\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1560,
        -100
      ],
      "id": "006e0543-fde8-4461-993c-346a66ad6835",
      "name": "Code"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": "[REDACTED]",
        "sheetName": "[REDACTED]",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Ticket ID": "={{ $json.ticket.id }}",
            "Date": "={{ $json.ticket.created_at }}",
            "Ticket Subject": "={{ $('Process Entire Ticket').item.json.subject }}",
            "Ticket Body": "={{ $('Process Entire Ticket').item.json.conversation }}",
            "Response": "={{ $('Code').item.json.ticket.comment.body }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Date",
              "displayName": "Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Ticket ID",
              "displayName": "Ticket ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Ticket Subject",
              "displayName": "Ticket Subject",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Ticket Body",
              "displayName": "Ticket Body",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Response",
              "displayName": "Response",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        2000,
        -100
      ],
      "id": "116f078e-a295-4331-a3a7-f5732e44c32e",
      "name": "Google Sheets",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "0gfAA0OjyI82SUBe",
          "name": "Sellsy AI (KS) Google Sheets API OAuth2"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1100,
        620
      ],
      "id": "54a9d660-2320-46d8-9498-1b4bd2b07f34",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "fXxOogeNOLeX5qEJ",
          "name": "openai-bart-demo"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.ticketInfo }}",
        "options": {
          "systemMessage": "You are a helpful email assistant.\nYour job is to read the ticket information and generate a response.\nTo generate your response, please use the web_search tool to find the answer.\n\nOutput your answer as a properly formatted JSON object:\n\n{\n  \"ticket\": {\n    \"comment\": {\n      \"body\": \"Hi there,\\n\\n{Response to customer}\\n\\nThanks,\\nAI Customer Support Agent\",\n      \"public\": true\n    }\n  }\n}\n\nImportant formatting notes:\n1. Use proper line breaks with \"\\\\n\" (double backslash) in your raw string output to ensure correct escaping.\n2. Include a comma after \"Thanks,\"\n3. Ensure the JSON is properly formatted and valid.\n4. Keep your responses clear, concise, and helpful.\n5. Quote all JSON keys and string values properly.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        1180,
        -100
      ],
      "id": "d877833f-df49-4155-9c90-8d4fa489a9bd",
      "name": "Responses Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.ticketInfo }}",
        "options": {
          "systemMessage": "Read the entire ticket and generate a succinct FAQ (question and answer pair) that captures the essence of the entire ticket. \nSo that this FAQ could have essentially solved the first message from the customer in one shot.\n\nOutput in plain text\nQuestion: string\nAnswer: string"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        1120,
        400
      ],
      "id": "65b01ddf-3f12-4c39-860b-11d8a94d1e23",
      "name": "FAQ Agent"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": "[REDACTED]",
        "sheetName": "[REDACTED]",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Date": "={{ $('HTTP Request3').item.json.ticket.updated_at }}",
            "Ticket Subject": "={{ $('HTTP Request3').item.json.ticket.subject }}",
            "Ticket Body": "={{ $('Flatten').item.json.ticketInfo }}",
            "Ticket ID": "={{ $('HTTP Request3').item.json.ticket.id }}",
            "FAQ": "={{ $json.output }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Date",
              "displayName": "Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Ticket ID",
              "displayName": "Ticket ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Ticket Subject",
              "displayName": "Ticket Subject",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Ticket Body",
              "displayName": "Ticket Body",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "FAQ",
              "displayName": "FAQ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        1500,
        400
      ],
      "id": "7e25e6a0-1985-47c8-9876-4f6504348c91",
      "name": "Google Sheets1"
    }
  ],
  "pinData": {},
  "connections": {
    "Process Entire Ticket": {
      "main": [
        [
          {
            "node": "Flatten",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "Process Entire Ticket",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request3": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Flatten": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Responses Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "FAQ Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Responses Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "ai_tool": [
        [
          {
            "node": "Responses Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Google Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "FAQ Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Responses Agent": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FAQ Agent": {
      "main": [
        [
          {
            "node": "Google Sheets1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "cbe44a5c-d82c-41b8-8225-29f351ab43c4",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "bec443f32f282145c50b8dcfc610fa7d9dd1cd11f81d464c6dad140e893c49a0"
  },
  "id": "rYO97g8vo2GBrTl7",
  "tags": [
    {
      "createdAt": "2025-03-27T09:59:28.159Z",
      "updatedAt": "2025-03-27T09:59:28.159Z",
      "id": "1a5nO4hc89n0BKRU",
      "name": "youtube"
    }
  ]
}